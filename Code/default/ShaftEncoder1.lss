
ShaftEncoder1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00001650  000016e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800308  00800308  000017ec  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000680  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3c  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000041b  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001040  00000000  00000000  00003083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  000040c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000589  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000506  00000000  00000000  000049cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004ed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_5>
      18:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_6>
      1c:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_7>
      20:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_8>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      7c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      80:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      8c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      90:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      94:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      98:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      9c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      ac:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      bc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      cc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      dc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e4:	06 05       	cpc	r16, r6
      e6:	2a 05       	cpc	r18, r10
      e8:	18 05       	cpc	r17, r8
      ea:	21 05       	cpc	r18, r1
      ec:	2a 05       	cpc	r18, r10
      ee:	2a 05       	cpc	r18, r10
      f0:	2a 05       	cpc	r18, r10
      f2:	2a 05       	cpc	r18, r10
      f4:	2a 05       	cpc	r18, r10
      f6:	2a 05       	cpc	r18, r10
      f8:	2a 05       	cpc	r18, r10
      fa:	2a 05       	cpc	r18, r10
      fc:	2a 05       	cpc	r18, r10
      fe:	2a 05       	cpc	r18, r10
     100:	2a 05       	cpc	r18, r10
     102:	2a 05       	cpc	r18, r10
     104:	e4 04       	cpc	r14, r4
     106:	ed 04       	cpc	r14, r13
     108:	f6 04       	cpc	r15, r6
     10a:	fd 04       	cpc	r15, r13
     10c:	2a 05       	cpc	r18, r10
     10e:	2a 05       	cpc	r18, r10
     110:	2a 05       	cpc	r18, r10
     112:	2a 05       	cpc	r18, r10
     114:	2a 05       	cpc	r18, r10
     116:	2a 05       	cpc	r18, r10
     118:	2a 05       	cpc	r18, r10
     11a:	2a 05       	cpc	r18, r10
     11c:	2a 05       	cpc	r18, r10
     11e:	2a 05       	cpc	r18, r10
     120:	2a 05       	cpc	r18, r10
     122:	0f 05       	cpc	r16, r15
     124:	2a 05       	cpc	r18, r10
     126:	7f 04       	cpc	r7, r15
     128:	2a 05       	cpc	r18, r10
     12a:	6d 04       	cpc	r6, r13
     12c:	2a 05       	cpc	r18, r10
     12e:	76 04       	cpc	r7, r6
     130:	2a 05       	cpc	r18, r10
     132:	2a 05       	cpc	r18, r10
     134:	d2 04       	cpc	r13, r2
     136:	2a 05       	cpc	r18, r10
     138:	db 04       	cpc	r13, r11
     13a:	8b 04       	cpc	r8, r11
     13c:	2a 05       	cpc	r18, r10
     13e:	2a 05       	cpc	r18, r10
     140:	97 04       	cpc	r9, r7
     142:	2a 05       	cpc	r18, r10
     144:	2a 05       	cpc	r18, r10
     146:	88 04       	cpc	r8, r8
     148:	8e 04       	cpc	r8, r14
     14a:	2a 05       	cpc	r18, r10
     14c:	64 04       	cpc	r6, r4
     14e:	2a 05       	cpc	r18, r10
     150:	2a 05       	cpc	r18, r10
     152:	2a 05       	cpc	r18, r10
     154:	2a 05       	cpc	r18, r10
     156:	2a 05       	cpc	r18, r10
     158:	9a 04       	cpc	r9, r10
     15a:	2a 05       	cpc	r18, r10
     15c:	ac 04       	cpc	r10, r12
     15e:	2a 05       	cpc	r18, r10
     160:	2a 05       	cpc	r18, r10
     162:	2a 05       	cpc	r18, r10
     164:	2a 05       	cpc	r18, r10
     166:	7f 04       	cpc	r7, r15
     168:	2a 05       	cpc	r18, r10
     16a:	6d 04       	cpc	r6, r13
     16c:	2a 05       	cpc	r18, r10
     16e:	76 04       	cpc	r7, r6
     170:	2a 05       	cpc	r18, r10
     172:	2a 05       	cpc	r18, r10
     174:	be 04       	cpc	r11, r14
     176:	2a 05       	cpc	r18, r10
     178:	c7 04       	cpc	r12, r7
     17a:	8b 04       	cpc	r8, r11
     17c:	2a 05       	cpc	r18, r10
     17e:	2a 05       	cpc	r18, r10
     180:	97 04       	cpc	r9, r7
     182:	2a 05       	cpc	r18, r10
     184:	2a 05       	cpc	r18, r10
     186:	88 04       	cpc	r8, r8
     188:	8e 04       	cpc	r8, r14
     18a:	2a 05       	cpc	r18, r10
     18c:	64 04       	cpc	r6, r4
     18e:	2a 05       	cpc	r18, r10
     190:	2a 05       	cpc	r18, r10
     192:	2a 05       	cpc	r18, r10
     194:	2a 05       	cpc	r18, r10
     196:	2a 05       	cpc	r18, r10
     198:	a3 04       	cpc	r10, r3
     19a:	2a 05       	cpc	r18, r10
     19c:	b5 04       	cpc	r11, r5

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d1 e2       	ldi	r29, 0x21	; 33
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	0c bf       	out	0x3c, r16	; 60

000001ae <__do_copy_data>:
     1ae:	13 e0       	ldi	r17, 0x03	; 3
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b2 e0       	ldi	r27, 0x02	; 2
     1b4:	e0 e5       	ldi	r30, 0x50	; 80
     1b6:	f6 e1       	ldi	r31, 0x16	; 22
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	0b bf       	out	0x3b, r16	; 59
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x14>
     1be:	07 90       	elpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a8 30       	cpi	r26, 0x08	; 8
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0x10>

000001c8 <__do_clear_bss>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a8 e0       	ldi	r26, 0x08	; 8
     1cc:	b3 e0       	ldi	r27, 0x03	; 3
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a7 33       	cpi	r26, 0x37	; 55
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 36 01 	call	0x26c	; 0x26c <main>
     1dc:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <function_caller>:
int i =0, j = 0;
int botId;

// 10$f# 10$a$f$200$3#
void function_caller()
{
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
	//int val, par;
	//unsigned char mode ;
//	mode = fcall[1][0];
	if(atoi(fcall[1]) == AUTOMATE ) //4 values 1st should be f 
     1e8:	8f e1       	ldi	r24, 0x1F	; 31
     1ea:	93 e0       	ldi	r25, 0x03	; 3
     1ec:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	91 05       	cpc	r25, r1
     1f4:	81 f4       	brne	.+32     	; 0x216 <function_caller+0x32>
	{
	
		moveMotors1(fcall[2][0],atoi(fcall[3]),atoi(fcall[4]));
     1f6:	89 e2       	ldi	r24, 0x29	; 41
     1f8:	93 e0       	ldi	r25, 0x03	; 3
     1fa:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
     1fe:	8c 01       	movw	r16, r24
     200:	8e e2       	ldi	r24, 0x2E	; 46
     202:	93 e0       	ldi	r25, 0x03	; 3
     204:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
     208:	ac 01       	movw	r20, r24
     20a:	80 91 24 03 	lds	r24, 0x0324
     20e:	b8 01       	movw	r22, r16
     210:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <moveMotors1>
     214:	06 c0       	rjmp	.+12     	; 0x222 <function_caller+0x3e>
	}

	else if(atoi(fcall[1]) == COMMAND )
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	21 f4       	brne	.+8      	; 0x222 <function_caller+0x3e>
		moveMotors(fcall[2][0]);
     21a:	80 91 24 03 	lds	r24, 0x0324
     21e:	0e 94 4a 04 	call	0x894	; 0x894 <moveMotors>
}
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	08 95       	ret

00000228 <port_init>:
#include <stdlib.h>


void port_init()
{
	motorsPinInit();
     228:	0e 94 0b 02 	call	0x416	; 0x416 <motorsPinInit>

	motion_pin_config();
     22c:	0e 94 35 02 	call	0x46a	; 0x46a <motion_pin_config>
	buzzer_pin_config();
     230:	0e 94 32 02 	call	0x464	; 0x464 <buzzer_pin_config>

	left_encoder_pin_config();
     234:	0e 94 a8 02 	call	0x550	; 0x550 <left_encoder_pin_config>
	leftFront_encoder_pin_config();
     238:	0e 94 ae 02 	call	0x55c	; 0x55c <leftFront_encoder_pin_config>
	right_encoder_pin_config();
     23c:	0e 94 ab 02 	call	0x556	; 0x556 <right_encoder_pin_config>
	rightFront_encoder_pin_config();
     240:	0e 94 b1 02 	call	0x562	; 0x562 <rightFront_encoder_pin_config>

	PWM_timerT5Init();
     244:	0e 94 50 02 	call	0x4a0	; 0x4a0 <PWM_timerT5Init>
	PWM_timerT3Init();
     248:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <PWM_timerT3Init>

	uart0_Xbee_init();
     24c:	0e 94 87 02 	call	0x50e	; 0x50e <uart0_Xbee_init>
}
     250:	08 95       	ret

00000252 <init_devices>:

//----------------------
//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
     252:	f8 94       	cli
 port_init();  //Initializes all the ports
     254:	0e 94 14 01 	call	0x228	; 0x228 <port_init>
 left_position_encoder_interrupt_init();
     258:	0e 94 b4 02 	call	0x568	; 0x568 <left_position_encoder_interrupt_init>
 leftFront_position_encoder_interrupt_init();
     25c:	0e 94 c6 02 	call	0x58c	; 0x58c <leftFront_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     260:	0e 94 bd 02 	call	0x57a	; 0x57a <right_position_encoder_interrupt_init>
 rightFront_position_encoder_interrupt_init();
     264:	0e 94 cf 02 	call	0x59e	; 0x59e <rightFront_position_encoder_interrupt_init>
 sei();   //Enables the global interrupts
     268:	78 94       	sei
}
     26a:	08 95       	ret

0000026c <main>:
		moveMotors(fcall[2][0]);
}


int main(void)
{
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	
	init_devices();
     270:	0e 94 29 01 	call	0x252	; 0x252 <init_devices>
	botId =  10;
     274:	8a e0       	ldi	r24, 0x0A	; 10
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	90 93 17 03 	sts	0x0317, r25
     27c:	80 93 16 03 	sts	0x0316, r24
				fcall[i][j] = 0;
				sei();
				function_caller();
				cli();
			}
			UDR0 = data;
     280:	03 e2       	ldi	r16, 0x23	; 35
	//ex. f100  or F100
	unsigned char data ;
while(1)
{

	data = uart0_getchar();
     282:	0e 94 9a 02 	call	0x534	; 0x534 <uart0_getchar>
     286:	18 2f       	mov	r17, r24
	uart0_putchar(data);
     288:	0e 94 a1 02 	call	0x542	; 0x542 <uart0_putchar>

	
	//uart0_putchar(mode);

	if(data == 0x23) // #
     28c:	13 32       	cpi	r17, 0x23	; 35
     28e:	69 f5       	brne	.+90     	; 0x2ea <main+0x7e>
	{
		if(atoi(fcall[0]) == botId) {
     290:	8a e1       	ldi	r24, 0x1A	; 26
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
     298:	20 91 16 03 	lds	r18, 0x0316
     29c:	30 91 17 03 	lds	r19, 0x0317
     2a0:	82 17       	cp	r24, r18
     2a2:	93 07       	cpc	r25, r19
     2a4:	e9 f4       	brne	.+58     	; 0x2e0 <main+0x74>
			if(j != 0) {
     2a6:	20 91 0a 03 	lds	r18, 0x030A
     2aa:	30 91 0b 03 	lds	r19, 0x030B
     2ae:	21 15       	cp	r18, r1
     2b0:	31 05       	cpc	r19, r1
     2b2:	a1 f0       	breq	.+40     	; 0x2dc <main+0x70>
				fcall[i][j] = 0;
     2b4:	80 91 08 03 	lds	r24, 0x0308
     2b8:	90 91 09 03 	lds	r25, 0x0309
     2bc:	fc 01       	movw	r30, r24
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	ee 0f       	add	r30, r30
     2c4:	ff 1f       	adc	r31, r31
     2c6:	e8 0f       	add	r30, r24
     2c8:	f9 1f       	adc	r31, r25
     2ca:	e2 0f       	add	r30, r18
     2cc:	f3 1f       	adc	r31, r19
     2ce:	e6 5e       	subi	r30, 0xE6	; 230
     2d0:	fc 4f       	sbci	r31, 0xFC	; 252
     2d2:	10 82       	st	Z, r1
				sei();
     2d4:	78 94       	sei
				function_caller();
     2d6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <function_caller>
				cli();
     2da:	f8 94       	cli
			}
			UDR0 = data;
     2dc:	00 93 c6 00 	sts	0x00C6, r16
		}
		i = 0;
     2e0:	10 92 09 03 	sts	0x0309, r1
     2e4:	10 92 08 03 	sts	0x0308, r1
     2e8:	1b c0       	rjmp	.+54     	; 0x320 <main+0xb4>
     2ea:	20 91 0a 03 	lds	r18, 0x030A
     2ee:	30 91 0b 03 	lds	r19, 0x030B
     2f2:	80 91 08 03 	lds	r24, 0x0308
     2f6:	90 91 09 03 	lds	r25, 0x0309
		j = 0;
	}
	else if(data == 0x24) // $
     2fa:	14 32       	cpi	r17, 0x24	; 36
     2fc:	b1 f4       	brne	.+44     	; 0x32a <main+0xbe>
	{
		fcall[i][j] = 0;
     2fe:	fc 01       	movw	r30, r24
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	ee 0f       	add	r30, r30
     306:	ff 1f       	adc	r31, r31
     308:	e8 0f       	add	r30, r24
     30a:	f9 1f       	adc	r31, r25
     30c:	e2 0f       	add	r30, r18
     30e:	f3 1f       	adc	r31, r19
     310:	e6 5e       	subi	r30, 0xE6	; 230
     312:	fc 4f       	sbci	r31, 0xFC	; 252
     314:	10 82       	st	Z, r1
		i++;
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	90 93 09 03 	sts	0x0309, r25
     31c:	80 93 08 03 	sts	0x0308, r24
		j = 0;
     320:	10 92 0b 03 	sts	0x030B, r1
     324:	10 92 0a 03 	sts	0x030A, r1
     328:	ac cf       	rjmp	.-168    	; 0x282 <main+0x16>
	}
	else
	{	
		fcall[i][j] = data;
     32a:	fc 01       	movw	r30, r24
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	e8 0f       	add	r30, r24
     336:	f9 1f       	adc	r31, r25
     338:	e2 0f       	add	r30, r18
     33a:	f3 1f       	adc	r31, r19
     33c:	e6 5e       	subi	r30, 0xE6	; 230
     33e:	fc 4f       	sbci	r31, 0xFC	; 252
     340:	10 83       	st	Z, r17
		j++;
     342:	2f 5f       	subi	r18, 0xFF	; 255
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	30 93 0b 03 	sts	0x030B, r19
     34a:	20 93 0a 03 	sts	0x030A, r18
     34e:	99 cf       	rjmp	.-206    	; 0x282 <main+0x16>

00000350 <startMotorFrontLeftWind>:
#include "Motor.h"


void startMotorFrontLeftWind(){

	CLEARBIT(PORTA,5);
     350:	15 98       	cbi	0x02, 5	; 2
	SETBIT(PORTA,4);
     352:	14 9a       	sbi	0x02, 4	; 2
}
     354:	08 95       	ret

00000356 <startMotorFrontLeftUnwind>:
void startMotorFrontLeftUnwind(){

	CLEARBIT(PORTA,4);
     356:	14 98       	cbi	0x02, 4	; 2
	SETBIT(PORTA,5);
     358:	15 9a       	sbi	0x02, 5	; 2
}
     35a:	08 95       	ret

0000035c <startMotorFrontRightWind>:

void startMotorFrontRightWind(){

	CLEARBIT(PORTA,7);
     35c:	17 98       	cbi	0x02, 7	; 2
	SETBIT(PORTA,6);
     35e:	16 9a       	sbi	0x02, 6	; 2
}
     360:	08 95       	ret

00000362 <startMotorFrontRightUnwind>:
void startMotorFrontRightUnwind(){

	CLEARBIT(PORTA,6);
     362:	16 98       	cbi	0x02, 6	; 2
	SETBIT(PORTA,7);
     364:	17 9a       	sbi	0x02, 7	; 2
}
     366:	08 95       	ret

00000368 <startMotorBackRightWind>:

void startMotorBackRightWind(){

	CLEARBIT(PORTA,1);
     368:	11 98       	cbi	0x02, 1	; 2
	SETBIT(PORTA,0);
     36a:	10 9a       	sbi	0x02, 0	; 2
}
     36c:	08 95       	ret

0000036e <startMotorBackRightUnwind>:
void startMotorBackRightUnwind(){

	CLEARBIT(PORTA,0);
     36e:	10 98       	cbi	0x02, 0	; 2
	SETBIT(PORTA,1);
     370:	11 9a       	sbi	0x02, 1	; 2
}
     372:	08 95       	ret

00000374 <startMotorBackLeftWind>:

void startMotorBackLeftWind(){

	CLEARBIT(PORTA,2);
     374:	12 98       	cbi	0x02, 2	; 2
	SETBIT(PORTA,3);
     376:	13 9a       	sbi	0x02, 3	; 2
}
     378:	08 95       	ret

0000037a <startMotorBackLeftUnwind>:
void startMotorBackLeftUnwind(){

	CLEARBIT(PORTA,3);
     37a:	13 98       	cbi	0x02, 3	; 2
	SETBIT(PORTA,2);
     37c:	12 9a       	sbi	0x02, 2	; 2
}
     37e:	08 95       	ret

00000380 <stopMotorFrontLeft>:

void stopMotorFrontLeft(){

	CLEARBIT(PORTA,4);
     380:	14 98       	cbi	0x02, 4	; 2
	CLEARBIT(PORTA,5);
     382:	15 98       	cbi	0x02, 5	; 2
	
}
     384:	08 95       	ret

00000386 <stopMotorFrontRight>:

void stopMotorFrontRight(){

	CLEARBIT(PORTA,6);
     386:	16 98       	cbi	0x02, 6	; 2
	CLEARBIT(PORTA,7);
     388:	17 98       	cbi	0x02, 7	; 2
	
}
     38a:	08 95       	ret

0000038c <stopMotorBackLeft>:

void stopMotorBackLeft(){

	CLEARBIT(PORTA,3);
     38c:	13 98       	cbi	0x02, 3	; 2
	CLEARBIT(PORTA,2);
     38e:	12 98       	cbi	0x02, 2	; 2
	
}
     390:	08 95       	ret

00000392 <stopMotorBackRight>:

void stopMotorBackRight(){

	CLEARBIT(PORTA,1);
     392:	11 98       	cbi	0x02, 1	; 2
	CLEARBIT(PORTA,0);
     394:	10 98       	cbi	0x02, 0	; 2
	
}
     396:	08 95       	ret

00000398 <move_Up>:
	SETBIT(PORTA,1);
}

void startMotorBackLeftWind(){

	CLEARBIT(PORTA,2);
     398:	12 98       	cbi	0x02, 2	; 2
	SETBIT(PORTA,3);
     39a:	13 9a       	sbi	0x02, 3	; 2
	SETBIT(PORTA,7);
}

void startMotorBackRightWind(){

	CLEARBIT(PORTA,1);
     39c:	11 98       	cbi	0x02, 1	; 2
	SETBIT(PORTA,0);
     39e:	10 9a       	sbi	0x02, 0	; 2
#include "Motor.h"


void startMotorFrontLeftWind(){

	CLEARBIT(PORTA,5);
     3a0:	15 98       	cbi	0x02, 5	; 2
	SETBIT(PORTA,4);
     3a2:	14 9a       	sbi	0x02, 4	; 2
	SETBIT(PORTA,5);
}

void startMotorFrontRightWind(){

	CLEARBIT(PORTA,7);
     3a4:	17 98       	cbi	0x02, 7	; 2
	SETBIT(PORTA,6);
     3a6:	16 9a       	sbi	0x02, 6	; 2
			
			startMotorBackLeftWind();
			startMotorBackRightWind();
			startMotorFrontLeftWind();
			startMotorFrontRightWind();
}
     3a8:	08 95       	ret

000003aa <move_Down>:
	CLEARBIT(PORTA,2);
	SETBIT(PORTA,3);
}
void startMotorBackLeftUnwind(){

	CLEARBIT(PORTA,3);
     3aa:	13 98       	cbi	0x02, 3	; 2
	SETBIT(PORTA,2);
     3ac:	12 9a       	sbi	0x02, 2	; 2
	CLEARBIT(PORTA,1);
	SETBIT(PORTA,0);
}
void startMotorBackRightUnwind(){

	CLEARBIT(PORTA,0);
     3ae:	10 98       	cbi	0x02, 0	; 2
	SETBIT(PORTA,1);
     3b0:	11 9a       	sbi	0x02, 1	; 2
	CLEARBIT(PORTA,5);
	SETBIT(PORTA,4);
}
void startMotorFrontLeftUnwind(){

	CLEARBIT(PORTA,4);
     3b2:	14 98       	cbi	0x02, 4	; 2
	SETBIT(PORTA,5);
     3b4:	15 9a       	sbi	0x02, 5	; 2
	CLEARBIT(PORTA,7);
	SETBIT(PORTA,6);
}
void startMotorFrontRightUnwind(){

	CLEARBIT(PORTA,6);
     3b6:	16 98       	cbi	0x02, 6	; 2
	SETBIT(PORTA,7);
     3b8:	17 9a       	sbi	0x02, 7	; 2
{
			startMotorBackLeftUnwind();
			startMotorBackRightUnwind();
			startMotorFrontLeftUnwind();
			startMotorFrontRightUnwind();
}
     3ba:	08 95       	ret

000003bc <move_Forward>:
	CLEARBIT(PORTA,2);
	SETBIT(PORTA,3);
}
void startMotorBackLeftUnwind(){

	CLEARBIT(PORTA,3);
     3bc:	13 98       	cbi	0x02, 3	; 2
	SETBIT(PORTA,2);
     3be:	12 9a       	sbi	0x02, 2	; 2
	CLEARBIT(PORTA,1);
	SETBIT(PORTA,0);
}
void startMotorBackRightUnwind(){

	CLEARBIT(PORTA,0);
     3c0:	10 98       	cbi	0x02, 0	; 2
	SETBIT(PORTA,1);
     3c2:	11 9a       	sbi	0x02, 1	; 2
#include "Motor.h"


void startMotorFrontLeftWind(){

	CLEARBIT(PORTA,5);
     3c4:	15 98       	cbi	0x02, 5	; 2
	SETBIT(PORTA,4);
     3c6:	14 9a       	sbi	0x02, 4	; 2
	SETBIT(PORTA,5);
}

void startMotorFrontRightWind(){

	CLEARBIT(PORTA,7);
     3c8:	17 98       	cbi	0x02, 7	; 2
	SETBIT(PORTA,6);
     3ca:	16 9a       	sbi	0x02, 6	; 2

			startMotorFrontLeftWind();
			startMotorFrontRightWind();
			

}
     3cc:	08 95       	ret

000003ce <move_Backward>:
	CLEARBIT(PORTA,5);
	SETBIT(PORTA,4);
}
void startMotorFrontLeftUnwind(){

	CLEARBIT(PORTA,4);
     3ce:	14 98       	cbi	0x02, 4	; 2
	SETBIT(PORTA,5);
     3d0:	15 9a       	sbi	0x02, 5	; 2
	CLEARBIT(PORTA,7);
	SETBIT(PORTA,6);
}
void startMotorFrontRightUnwind(){

	CLEARBIT(PORTA,6);
     3d2:	16 98       	cbi	0x02, 6	; 2
	SETBIT(PORTA,7);
     3d4:	17 9a       	sbi	0x02, 7	; 2
	SETBIT(PORTA,1);
}

void startMotorBackLeftWind(){

	CLEARBIT(PORTA,2);
     3d6:	12 98       	cbi	0x02, 2	; 2
	SETBIT(PORTA,3);
     3d8:	13 9a       	sbi	0x02, 3	; 2
	SETBIT(PORTA,7);
}

void startMotorBackRightWind(){

	CLEARBIT(PORTA,1);
     3da:	11 98       	cbi	0x02, 1	; 2
	SETBIT(PORTA,0);
     3dc:	10 9a       	sbi	0x02, 0	; 2
			startMotorFrontRightUnwind();
			startMotorBackLeftWind();
			startMotorBackRightWind();


}
     3de:	08 95       	ret

000003e0 <move_Right>:
	CLEARBIT(PORTA,5);
	SETBIT(PORTA,4);
}
void startMotorFrontLeftUnwind(){

	CLEARBIT(PORTA,4);
     3e0:	14 98       	cbi	0x02, 4	; 2
	SETBIT(PORTA,5);
     3e2:	15 9a       	sbi	0x02, 5	; 2
	CLEARBIT(PORTA,2);
	SETBIT(PORTA,3);
}
void startMotorBackLeftUnwind(){

	CLEARBIT(PORTA,3);
     3e4:	13 98       	cbi	0x02, 3	; 2
	SETBIT(PORTA,2);
     3e6:	12 9a       	sbi	0x02, 2	; 2
	SETBIT(PORTA,5);
}

void startMotorFrontRightWind(){

	CLEARBIT(PORTA,7);
     3e8:	17 98       	cbi	0x02, 7	; 2
	SETBIT(PORTA,6);
     3ea:	16 9a       	sbi	0x02, 6	; 2
	SETBIT(PORTA,7);
}

void startMotorBackRightWind(){

	CLEARBIT(PORTA,1);
     3ec:	11 98       	cbi	0x02, 1	; 2
	SETBIT(PORTA,0);
     3ee:	10 9a       	sbi	0x02, 0	; 2
			startMotorBackLeftUnwind();}
{
			startMotorFrontRightWind();
			startMotorBackRightWind();}

}
     3f0:	08 95       	ret

000003f2 <move_Left>:
#include "Motor.h"


void startMotorFrontLeftWind(){

	CLEARBIT(PORTA,5);
     3f2:	15 98       	cbi	0x02, 5	; 2
	SETBIT(PORTA,4);
     3f4:	14 9a       	sbi	0x02, 4	; 2
	CLEARBIT(PORTA,7);
	SETBIT(PORTA,6);
}
void startMotorFrontRightUnwind(){

	CLEARBIT(PORTA,6);
     3f6:	16 98       	cbi	0x02, 6	; 2
	SETBIT(PORTA,7);
     3f8:	17 9a       	sbi	0x02, 7	; 2
	SETBIT(PORTA,1);
}

void startMotorBackLeftWind(){

	CLEARBIT(PORTA,2);
     3fa:	12 98       	cbi	0x02, 2	; 2
	SETBIT(PORTA,3);
     3fc:	13 9a       	sbi	0x02, 3	; 2
	CLEARBIT(PORTA,1);
	SETBIT(PORTA,0);
}
void startMotorBackRightUnwind(){

	CLEARBIT(PORTA,0);
     3fe:	10 98       	cbi	0x02, 0	; 2
	SETBIT(PORTA,1);
     400:	11 9a       	sbi	0x02, 1	; 2
			startMotorFrontLeftWind();
			startMotorFrontRightUnwind();
			startMotorBackLeftWind();
			startMotorBackRightUnwind();

}
     402:	08 95       	ret

00000404 <stop_All>:
	SETBIT(PORTA,2);
}

void stopMotorFrontLeft(){

	CLEARBIT(PORTA,4);
     404:	14 98       	cbi	0x02, 4	; 2
	CLEARBIT(PORTA,5);
     406:	15 98       	cbi	0x02, 5	; 2
	
}

void stopMotorFrontRight(){

	CLEARBIT(PORTA,6);
     408:	16 98       	cbi	0x02, 6	; 2
	CLEARBIT(PORTA,7);
     40a:	17 98       	cbi	0x02, 7	; 2
	
}

void stopMotorBackLeft(){

	CLEARBIT(PORTA,3);
     40c:	13 98       	cbi	0x02, 3	; 2
	CLEARBIT(PORTA,2);
     40e:	12 98       	cbi	0x02, 2	; 2
	
}

void stopMotorBackRight(){

	CLEARBIT(PORTA,1);
     410:	11 98       	cbi	0x02, 1	; 2
	CLEARBIT(PORTA,0);
     412:	10 98       	cbi	0x02, 0	; 2
void stop_All(){
	stopMotorFrontLeft();
	stopMotorFrontRight();
	stopMotorBackLeft();
	stopMotorBackRight();
}
     414:	08 95       	ret

00000416 <motorsPinInit>:



void motorsPinInit()
{
	SETBIT(DDRA,0);
     416:	08 9a       	sbi	0x01, 0	; 1
	SETBIT(DDRA,1);
     418:	09 9a       	sbi	0x01, 1	; 1
	SETBIT(DDRA,2);
     41a:	0a 9a       	sbi	0x01, 2	; 1
	SETBIT(DDRA,3);
     41c:	0b 9a       	sbi	0x01, 3	; 1

	SETBIT(DDRL,3);
     41e:	aa e0       	ldi	r26, 0x0A	; 10
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	8c 91       	ld	r24, X
     424:	88 60       	ori	r24, 0x08	; 8
     426:	8c 93       	st	X, r24
	SETBIT(DDRL,4);
     428:	8c 91       	ld	r24, X
     42a:	80 61       	ori	r24, 0x10	; 16
     42c:	8c 93       	st	X, r24

	CLEARBIT(PORTA,0);
     42e:	10 98       	cbi	0x02, 0	; 2
	CLEARBIT(PORTA,1);
     430:	11 98       	cbi	0x02, 1	; 2
	CLEARBIT(PORTA,2);
     432:	12 98       	cbi	0x02, 2	; 2
	CLEARBIT(PORTA,3);
     434:	13 98       	cbi	0x02, 3	; 2

	SETBIT(PORTL,3);
     436:	eb e0       	ldi	r30, 0x0B	; 11
     438:	f1 e0       	ldi	r31, 0x01	; 1
     43a:	80 81       	ld	r24, Z
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	80 83       	st	Z, r24
	SETBIT(PORTL,4);
     440:	80 81       	ld	r24, Z
     442:	80 61       	ori	r24, 0x10	; 16
     444:	80 83       	st	Z, r24
	//PORTL = 0x18;
//********************************************
	SETBIT(DDRA,4);
     446:	0c 9a       	sbi	0x01, 4	; 1
	SETBIT(DDRA,5);
     448:	0d 9a       	sbi	0x01, 5	; 1
	SETBIT(DDRA,6);
     44a:	0e 9a       	sbi	0x01, 6	; 1
	SETBIT(DDRA,7);
     44c:	0f 9a       	sbi	0x01, 7	; 1

	SETBIT(DDRL,5);
     44e:	8c 91       	ld	r24, X
     450:	80 62       	ori	r24, 0x20	; 32
     452:	8c 93       	st	X, r24


	CLEARBIT(PORTA,4);
     454:	14 98       	cbi	0x02, 4	; 2
	CLEARBIT(PORTA,5);
     456:	15 98       	cbi	0x02, 5	; 2
	CLEARBIT(PORTA,6);
     458:	16 98       	cbi	0x02, 6	; 2
	CLEARBIT(PORTA,7);
     45a:	17 98       	cbi	0x02, 7	; 2

	SETBIT(PORTL,5);
     45c:	80 81       	ld	r24, Z
     45e:	80 62       	ori	r24, 0x20	; 32
     460:	80 83       	st	Z, r24


//***********************************************
}
     462:	08 95       	ret

00000464 <buzzer_pin_config>:


void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     464:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     466:	43 98       	cbi	0x08, 3	; 8
}
     468:	08 95       	ret

0000046a <motion_pin_config>:

void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     46a:	81 b1       	in	r24, 0x01	; 1
     46c:	8f 60       	ori	r24, 0x0F	; 15
     46e:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     470:	82 b1       	in	r24, 0x02	; 2
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x38;   //Setting PL3 and PL4 pins as output for PWM generation & PL5 //c1
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	88 63       	ori	r24, 0x38	; 56
     47e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x38; //PL3 and PL4 pins are for velocity control using PWM.
     480:	eb e0       	ldi	r30, 0x0B	; 11
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	80 81       	ld	r24, Z
     486:	88 63       	ori	r24, 0x38	; 56
     488:	80 83       	st	Z, r24

 DDRE = DDRE | 0x08;   //Setting PL3 and PL4 pins as output for PWM generation & PL5 //c1
     48a:	6b 9a       	sbi	0x0d, 3	; 13
 PORTE = PORTE | 0x08; //PL3 and PL4 pins are for velocity control using PWM.
     48c:	73 9a       	sbi	0x0e, 3	; 14

}
     48e:	08 95       	ret

00000490 <buzzer_on>:


void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     490:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     492:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     494:	88 b9       	out	0x08, r24	; 8
}
     496:	08 95       	ret

00000498 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     498:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     49a:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     49c:	88 b9       	out	0x08, r24	; 8
}
     49e:	08 95       	ret

000004a0 <PWM_timerT5Init>:
#include "PWM.h"

void PWM_timerT5Init()
{
	TCCR5B = 0x00; //Stop
     4a0:	e1 e2       	ldi	r30, 0x21	; 33
     4a2:	f1 e0       	ldi	r31, 0x01	; 1
     4a4:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
     4a6:	9f ef       	ldi	r25, 0xFF	; 255
     4a8:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 24 01 	sts	0x0124, r24

	OCR5AH = 0x00; //Output compare register high value for Front Left
     4b2:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF; //Output compare register low value for Front Left
     4b6:	90 93 28 01 	sts	0x0128, r25
	
	OCR5BH = 0x00; //Output compare register high value for Front Right
     4ba:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF; //Output compare register low value for Front Right
     4be:	90 93 2a 01 	sts	0x012A, r25
	
	OCR5CH = 0x00; //Output compare register high value for Back Right
     4c2:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF; //Output compare register low value for Back Right
     4c6:	90 93 2c 01 	sts	0x012C, r25
	
	
	TCCR5A = 0xA9; //COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1
     4ca:	89 ea       	ldi	r24, 0xA9	; 169
     4cc:	80 93 20 01 	sts	0x0120, r24
// COM5C0=0
//For Overriding normal port functionality to OCRnA outputs. WGM51=0, WGM50=1 Along With GM52 //in TCCR5B for Selecting FAST PWM 8-bit Mode
	TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     4d0:	8b e0       	ldi	r24, 0x0B	; 11
     4d2:	80 83       	st	Z, r24
}
     4d4:	08 95       	ret

000004d6 <PWM_timerT3Init>:

void PWM_timerT3Init()
{
	TCCR3B = 0x00; //Stop
     4d6:	e1 e9       	ldi	r30, 0x91	; 145
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	10 82       	st	Z, r1
	TCNT3H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
     4dc:	9f ef       	ldi	r25, 0xFF	; 255
     4de:	90 93 95 00 	sts	0x0095, r25
	TCNT3L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 94 00 	sts	0x0094, r24

	OCR3AH = 0x00; //Output compare register high value for Back Left
     4e8:	10 92 99 00 	sts	0x0099, r1
	OCR3AL = 0xFF; //Output compare register low value for Back Left
     4ec:	90 93 98 00 	sts	0x0098, r25
	
	
	TCCR3A = 0xA9; //COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1
     4f0:	89 ea       	ldi	r24, 0xA9	; 169
     4f2:	80 93 90 00 	sts	0x0090, r24
// COM5C0=0
//For Overriding normal port functionality to OCRnA outputs. WGM51=0, WGM50=1 Along With GM52 //in TCCR5B for Selecting FAST PWM 8-bit Mode
	TCCR3B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     4f6:	8b e0       	ldi	r24, 0x0B	; 11
     4f8:	80 83       	st	Z, r24
}
     4fa:	08 95       	ret

000004fc <velocity>:

	OCR3AL = backLeft;
	OCR5CL = backRight;
*/

OCR5AL = backLeft;
     4fc:	40 93 28 01 	sts	0x0128, r20
	OCR5BL = backRight;
     500:	20 93 2a 01 	sts	0x012A, r18

	OCR3AL = frontLeft;
     504:	80 93 98 00 	sts	0x0098, r24
	OCR5CL = frontRight;
     508:	60 93 2c 01 	sts	0x012C, r22

}
     50c:	08 95       	ret

0000050e <uart0_Xbee_init>:
#include "Xbee.h"

void uart0_Xbee_init(void) {
cli();
     50e:	f8 94       	cli
    UBRR0H = UBRRH_VALUE;
     510:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     514:	87 e4       	ldi	r24, 0x47	; 71
     516:	80 93 c4 00 	sts	0x00C4, r24

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
     51a:	e0 ec       	ldi	r30, 0xC0	; 192
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	8d 7f       	andi	r24, 0xFD	; 253
     522:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
     524:	86 e0       	ldi	r24, 0x06	; 6
     526:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     52a:	88 e1       	ldi	r24, 0x18	; 24
     52c:	80 93 c1 00 	sts	0x00C1, r24
sei();
     530:	78 94       	sei
}
     532:	08 95       	ret

00000534 <uart0_getchar>:

char uart0_getchar(void) {

	unsigned char data1;
    //loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
	while(!(UCSR0A&(1<<RXC0))){}
     534:	80 91 c0 00 	lds	r24, 0x00C0
     538:	87 ff       	sbrs	r24, 7
     53a:	fc cf       	rjmp	.-8      	; 0x534 <uart0_getchar>
	
	data1 = UDR0;
     53c:	80 91 c6 00 	lds	r24, 0x00C6

    return data1;
}
     540:	08 95       	ret

00000542 <uart0_putchar>:

void uart0_putchar(char c) {
    UDR0 = c;
     542:	80 93 c6 00 	sts	0x00C6, r24

   loop_until_bit_is_set(UCSR0A, TXC0); /* Wait until transmission ready. */  //both statements work i.e. loop_until... and while..
     546:	80 91 c0 00 	lds	r24, 0x00C0
     54a:	86 ff       	sbrs	r24, 6
     54c:	fc cf       	rjmp	.-8      	; 0x546 <uart0_putchar+0x4>
// 	while(!(UCSR0A&(1<<TXC0))){}

}
     54e:	08 95       	ret

00000550 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
//PE4
void left_encoder_pin_config (void)
{
	DDRE = DDRE & 0xEF; //Set the direction of the PORTE 4 pin as input
     550:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     552:	74 9a       	sbi	0x0e, 4	; 14
}
     554:	08 95       	ret

00000556 <right_encoder_pin_config>:
//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
//PE5
void right_encoder_pin_config (void)
{
	DDRE = DDRE & 0xDF; //Set the direction of the PORTE 4 pin as input
     556:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     558:	75 9a       	sbi	0x0e, 5	; 14
}
     55a:	08 95       	ret

0000055c <leftFront_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
//PE6 - C2
void leftFront_encoder_pin_config (void)
{
	DDRE = DDRE & 0xBF; //Set the direction of the PORTE 4 pin as input
     55c:	6e 98       	cbi	0x0d, 6	; 13
	PORTE = PORTE | 0x40; //Enable internal pull-up for PORTE 4 pin
     55e:	76 9a       	sbi	0x0e, 6	; 14
}
     560:	08 95       	ret

00000562 <rightFront_encoder_pin_config>:
//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
//PE7 - C1
void rightFront_encoder_pin_config (void)
{
	DDRE = DDRE & 0x7F; //Set the direction of the PORTE 4 pin as input
     562:	6f 98       	cbi	0x0d, 7	; 13
	PORTE = PORTE | 0x80; //Enable internal pull-up for PORTE 4 pin
     564:	77 9a       	sbi	0x0e, 7	; 14
}
     566:	08 95       	ret

00000568 <left_position_encoder_interrupt_init>:



void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     568:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     56a:	ea e6       	ldi	r30, 0x6A	; 106
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	82 60       	ori	r24, 0x02	; 2
     572:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     574:	ec 9a       	sbi	0x1d, 4	; 29
	sei(); // Enables the global interrupt
     576:	78 94       	sei
}
     578:	08 95       	ret

0000057a <right_position_encoder_interrupt_init>:
void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     57a:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     57c:	ea e6       	ldi	r30, 0x6A	; 106
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	88 60       	ori	r24, 0x08	; 8
     584:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     586:	ed 9a       	sbi	0x1d, 5	; 29
	sei(); // Enables the global interrupt
     588:	78 94       	sei
}
     58a:	08 95       	ret

0000058c <leftFront_position_encoder_interrupt_init>:
//c2
void leftFront_position_encoder_interrupt_init (void) //Interrupt 6 enable
{
	cli(); //Clears the global interrupt
     58c:	f8 94       	cli
	EICRB = EICRB | 0x20; // INT6 is set to trigger with falling edge
     58e:	ea e6       	ldi	r30, 0x6A	; 106
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	80 62       	ori	r24, 0x20	; 32
     596:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x40; // Enable Interrupt INT7 for left position encoder
     598:	ee 9a       	sbi	0x1d, 6	; 29
	sei(); // Enables the global interrupt
     59a:	78 94       	sei
}
     59c:	08 95       	ret

0000059e <rightFront_position_encoder_interrupt_init>:
//c1
void rightFront_position_encoder_interrupt_init (void) //Interrupt 7 enable
{
	cli(); //Clears the global interrupt
     59e:	f8 94       	cli
	EICRB = EICRB | 0x80; // INT7 is set to trigger with falling edge
     5a0:	ea e6       	ldi	r30, 0x6A	; 106
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	80 68       	ori	r24, 0x80	; 128
     5a8:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x80; // Enable Interrupt INT7 for right position encoder
     5aa:	ef 9a       	sbi	0x1d, 7	; 29
	sei(); // Enables the global interrupt
     5ac:	78 94       	sei
}
     5ae:	08 95       	ret

000005b0 <__vector_5>:


//ISR for left position encoder
//HERE its RIGHT 
ISR(INT4_vect)
{
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
	cli();
     5be:	f8 94       	cli
		ShaftCountRight++; //increment left shaft position count
     5c0:	80 91 0c 03 	lds	r24, 0x030C
     5c4:	90 91 0d 03 	lds	r25, 0x030D
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 0d 03 	sts	0x030D, r25
     5ce:	80 93 0c 03 	sts	0x030C, r24
	sei();
     5d2:	78 94       	sei
}
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	8f 93       	push	r24
     5ee:	9f 93       	push	r25
	cli();
     5f0:	f8 94       	cli
		ShaftCountLeft++; //increment right shaft position count
     5f2:	80 91 35 03 	lds	r24, 0x0335
     5f6:	90 91 36 03 	lds	r25, 0x0336
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	90 93 36 03 	sts	0x0336, r25
     600:	80 93 35 03 	sts	0x0335, r24
	sei();
     604:	78 94       	sei
}
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <__vector_7>:


//ISR for Right
//c2
ISR(INT6_vect)
{
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
	cli();
     622:	f8 94       	cli
		ShaftCountRightFront++; //increment left shaft position count
     624:	80 91 14 03 	lds	r24, 0x0314
     628:	90 91 15 03 	lds	r25, 0x0315
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	90 93 15 03 	sts	0x0315, r25
     632:	80 93 14 03 	sts	0x0314, r24
	sei();
     636:	78 94       	sei
}
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_8>:

//for Left
//c1
ISR(INT7_vect)
{
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
	cli();
     654:	f8 94       	cli
		ShaftCountLeftFront++; //
     656:	80 91 18 03 	lds	r24, 0x0318
     65a:	90 91 19 03 	lds	r25, 0x0319
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	90 93 19 03 	sts	0x0319, r25
     664:	80 93 18 03 	sts	0x0318, r24
	sei();
     668:	78 94       	sei
}
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <linear_distance_mm>:



void linear_distance_mm(unsigned int DistanceInMM)
{
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 1.2; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	bc 01       	movw	r22, r24
     68a:	cd 01       	movw	r24, r26
     68c:	0e 94 34 08 	call	0x1068	; 0x1068 <__floatunsisf>
     690:	2a e9       	ldi	r18, 0x9A	; 154
     692:	39 e9       	ldi	r19, 0x99	; 153
     694:	49 e9       	ldi	r20, 0x99	; 153
     696:	5f e3       	ldi	r21, 0x3F	; 63
     698:	0e 94 04 07 	call	0xe08	; 0xe08 <__divsf3>
     69c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fixunssfsi>
     6a0:	7b 01       	movw	r14, r22
     6a2:	8c 01       	movw	r16, r24

	ShaftCountRight = 0;
     6a4:	10 92 0d 03 	sts	0x030D, r1
     6a8:	10 92 0c 03 	sts	0x030C, r1
	ShaftCountLeft = 0;
     6ac:	10 92 36 03 	sts	0x0336, r1
     6b0:	10 92 35 03 	sts	0x0335, r1
	ShaftCountRightFront = 0;
     6b4:	10 92 15 03 	sts	0x0315, r1
     6b8:	10 92 14 03 	sts	0x0314, r1
	ShaftCountLeftFront = 0;
     6bc:	10 92 19 03 	sts	0x0319, r1
     6c0:	10 92 18 03 	sts	0x0318, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			stopMotorBackRight();
			FLAG_BR = TRUE;	
     6c4:	c1 e0       	ldi	r28, 0x01	; 1
     6c6:	d0 e0       	ldi	r29, 0x00	; 0



	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     6c8:	80 91 0c 03 	lds	r24, 0x030C
     6cc:	90 91 0d 03 	lds	r25, 0x030D
     6d0:	aa 27       	eor	r26, r26
     6d2:	97 fd       	sbrc	r25, 7
     6d4:	a0 95       	com	r26
     6d6:	ba 2f       	mov	r27, r26
     6d8:	e8 16       	cp	r14, r24
     6da:	f9 06       	cpc	r15, r25
     6dc:	0a 07       	cpc	r16, r26
     6de:	1b 07       	cpc	r17, r27
     6e0:	30 f4       	brcc	.+12     	; 0x6ee <linear_distance_mm+0x76>
		{
			stopMotorBackRight();
     6e2:	0e 94 c9 01 	call	0x392	; 0x392 <stopMotorBackRight>
			FLAG_BR = TRUE;	
     6e6:	d0 93 13 03 	sts	0x0313, r29
     6ea:	c0 93 12 03 	sts	0x0312, r28
		}
		if(ShaftCountLeft > ReqdShaftCountInt)
     6ee:	80 91 35 03 	lds	r24, 0x0335
     6f2:	90 91 36 03 	lds	r25, 0x0336
     6f6:	aa 27       	eor	r26, r26
     6f8:	97 fd       	sbrc	r25, 7
     6fa:	a0 95       	com	r26
     6fc:	ba 2f       	mov	r27, r26
     6fe:	e8 16       	cp	r14, r24
     700:	f9 06       	cpc	r15, r25
     702:	0a 07       	cpc	r16, r26
     704:	1b 07       	cpc	r17, r27
     706:	30 f4       	brcc	.+12     	; 0x714 <linear_distance_mm+0x9c>
		{
			stopMotorBackLeft();
     708:	0e 94 c6 01 	call	0x38c	; 0x38c <stopMotorBackLeft>
			FLAG_BL = TRUE;
     70c:	d0 93 34 03 	sts	0x0334, r29
     710:	c0 93 33 03 	sts	0x0333, r28
		}
		if(ShaftCountRightFront > ReqdShaftCountInt)
     714:	80 91 14 03 	lds	r24, 0x0314
     718:	90 91 15 03 	lds	r25, 0x0315
     71c:	aa 27       	eor	r26, r26
     71e:	97 fd       	sbrc	r25, 7
     720:	a0 95       	com	r26
     722:	ba 2f       	mov	r27, r26
     724:	e8 16       	cp	r14, r24
     726:	f9 06       	cpc	r15, r25
     728:	0a 07       	cpc	r16, r26
     72a:	1b 07       	cpc	r17, r27
     72c:	30 f4       	brcc	.+12     	; 0x73a <linear_distance_mm+0xc2>
		{
			stopMotorFrontRight();
     72e:	0e 94 c3 01 	call	0x386	; 0x386 <stopMotorFrontRight>
			FLAG_FR = TRUE;
     732:	d0 93 0f 03 	sts	0x030F, r29
     736:	c0 93 0e 03 	sts	0x030E, r28
		}
		if(ShaftCountRightFront > ReqdShaftCountInt)
     73a:	80 91 14 03 	lds	r24, 0x0314
     73e:	90 91 15 03 	lds	r25, 0x0315
     742:	aa 27       	eor	r26, r26
     744:	97 fd       	sbrc	r25, 7
     746:	a0 95       	com	r26
     748:	ba 2f       	mov	r27, r26
     74a:	e8 16       	cp	r14, r24
     74c:	f9 06       	cpc	r15, r25
     74e:	0a 07       	cpc	r16, r26
     750:	1b 07       	cpc	r17, r27
     752:	30 f4       	brcc	.+12     	; 0x760 <linear_distance_mm+0xe8>
		//if(ShaftCountLeftFront > ReqdShaftCountInt)
		{
			stopMotorFrontLeft();
     754:	0e 94 c0 01 	call	0x380	; 0x380 <stopMotorFrontLeft>
			FLAG_FL = TRUE;
     758:	d0 93 11 03 	sts	0x0311, r29
     75c:	c0 93 10 03 	sts	0x0310, r28
		}
		if(FLAG_BR==TRUE && FLAG_BL==TRUE && FLAG_FR==TRUE && FLAG_FL==TRUE)
     760:	80 91 12 03 	lds	r24, 0x0312
     764:	90 91 13 03 	lds	r25, 0x0313
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	09 f0       	breq	.+2      	; 0x76e <linear_distance_mm+0xf6>
     76c:	ad cf       	rjmp	.-166    	; 0x6c8 <linear_distance_mm+0x50>
     76e:	80 91 33 03 	lds	r24, 0x0333
     772:	90 91 34 03 	lds	r25, 0x0334
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	09 f0       	breq	.+2      	; 0x77c <linear_distance_mm+0x104>
     77a:	a6 cf       	rjmp	.-180    	; 0x6c8 <linear_distance_mm+0x50>
     77c:	80 91 0e 03 	lds	r24, 0x030E
     780:	90 91 0f 03 	lds	r25, 0x030F
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	09 f0       	breq	.+2      	; 0x78a <linear_distance_mm+0x112>
     788:	9f cf       	rjmp	.-194    	; 0x6c8 <linear_distance_mm+0x50>
     78a:	80 91 10 03 	lds	r24, 0x0310
     78e:	90 91 11 03 	lds	r25, 0x0311
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	09 f0       	breq	.+2      	; 0x798 <linear_distance_mm+0x120>
     796:	98 cf       	rjmp	.-208    	; 0x6c8 <linear_distance_mm+0x50>
	}


	

}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	08 95       	ret

000007a6 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	8c 01       	movw	r16, r24
	velocity(250,255,250,250);
     7ac:	8a ef       	ldi	r24, 0xFA	; 250
     7ae:	6f ef       	ldi	r22, 0xFF	; 255
     7b0:	4a ef       	ldi	r20, 0xFA	; 250
     7b2:	2a ef       	ldi	r18, 0xFA	; 250
     7b4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
	move_Forward();
     7b8:	0e 94 de 01 	call	0x3bc	; 0x3bc <move_Forward>
	linear_distance_mm(DistanceInMM);
     7bc:	c8 01       	movw	r24, r16
     7be:	0e 94 3c 03 	call	0x678	; 0x678 <linear_distance_mm>
}
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <moveMotors1>:



#define TROUGH_COUNT 3
void moveMotors1(unsigned char data, int DistanceInMM, int noofTrough) 		// ISR for receive complete interrupt
{
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cb 01       	movw	r24, r22
     7da:	8a 01       	movw	r16, r20

	//int noofTrough = TROUGH_COUNT ;
	int gapTrough = DistanceInMM/noofTrough;
     7dc:	ba 01       	movw	r22, r20
     7de:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__divmodhi4>
     7e2:	6b 01       	movw	r12, r22

	move_Up();
     7e4:	0e 94 cc 01 	call	0x398	; 0x398 <move_Up>
     7e8:	80 e2       	ldi	r24, 0x20	; 32
     7ea:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ec:	24 e1       	ldi	r18, 0x14	; 20
     7ee:	31 e0       	ldi	r19, 0x01	; 1
     7f0:	f9 01       	movw	r30, r18
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <moveMotors1+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f8:	d9 f7       	brne	.-10     	; 0x7f0 <moveMotors1+0x28>
	_delay_ms(2000);

velocity(100,100,250,250);
     7fa:	84 e6       	ldi	r24, 0x64	; 100
     7fc:	64 e6       	ldi	r22, 0x64	; 100
     7fe:	4a ef       	ldi	r20, 0xFA	; 250
     800:	2a ef       	ldi	r18, 0xFA	; 250
     802:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
	
	move_Backward();
     806:	0e 94 e7 01 	call	0x3ce	; 0x3ce <move_Backward>
     80a:	80 e3       	ldi	r24, 0x30	; 48
     80c:	95 e7       	ldi	r25, 0x75	; 117
     80e:	24 e1       	ldi	r18, 0x14	; 20
     810:	31 e0       	ldi	r19, 0x01	; 1
     812:	f9 01       	movw	r30, r18
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <moveMotors1+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     818:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81a:	d9 f7       	brne	.-10     	; 0x812 <moveMotors1+0x4a>
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(3000);

for(int i=0;i<noofTrough-1;i++)
     820:	78 01       	movw	r14, r16
     822:	08 94       	sec
     824:	e1 08       	sbc	r14, r1
     826:	f1 08       	sbc	r15, r1
     828:	04 e1       	ldi	r16, 0x14	; 20
     82a:	11 e0       	ldi	r17, 0x01	; 1
     82c:	25 c0       	rjmp	.+74     	; 0x878 <moveMotors1+0xb0>
{
	move_Up();
     82e:	0e 94 cc 01 	call	0x398	; 0x398 <move_Up>
     832:	8f ef       	ldi	r24, 0xFF	; 255
     834:	9f ef       	ldi	r25, 0xFF	; 255
     836:	f8 01       	movw	r30, r16
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <moveMotors1+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     83c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     83e:	d9 f7       	brne	.-10     	; 0x836 <moveMotors1+0x6e>
	_delay_ms(7000);

	move_Down();
     840:	0e 94 d5 01 	call	0x3aa	; 0x3aa <move_Down>
     844:	80 e1       	ldi	r24, 0x10	; 16
     846:	97 e2       	ldi	r25, 0x27	; 39
     848:	f8 01       	movw	r30, r16
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <moveMotors1+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     850:	d9 f7       	brne	.-10     	; 0x848 <moveMotors1+0x80>
	_delay_ms(1000);


	velocity(250,250,100,100);
     852:	8a ef       	ldi	r24, 0xFA	; 250
     854:	6a ef       	ldi	r22, 0xFA	; 250
     856:	44 e6       	ldi	r20, 0x64	; 100
     858:	24 e6       	ldi	r18, 0x64	; 100
     85a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
	move_Forward();
     85e:	0e 94 de 01 	call	0x3bc	; 0x3bc <move_Forward>
	linear_distance_mm(gapTrough);
     862:	c6 01       	movw	r24, r12
     864:	0e 94 3c 03 	call	0x678	; 0x678 <linear_distance_mm>
     868:	80 e2       	ldi	r24, 0x20	; 32
     86a:	9e e4       	ldi	r25, 0x4E	; 78
     86c:	f8 01       	movw	r30, r16
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <moveMotors1+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     872:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     874:	d9 f7       	brne	.-10     	; 0x86c <moveMotors1+0xa4>
velocity(100,100,250,250);
	
	move_Backward();
	_delay_ms(3000);

for(int i=0;i<noofTrough-1;i++)
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	ce 15       	cp	r28, r14
     87a:	df 05       	cpc	r29, r15
     87c:	c4 f2       	brlt	.-80     	; 0x82e <moveMotors1+0x66>
	move_Forward();
	linear_distance_mm(gapTrough);
	_delay_ms(2000);
}

stop_All();
     87e:	0e 94 02 02 	call	0x404	; 0x404 <stop_All>

}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	08 95       	ret

00000894 <moveMotors>:
#include "PWM.h"
#include "ShaftEncoder.h"


void moveMotors(unsigned char data)
{
     894:	1f 93       	push	r17
     896:	18 2f       	mov	r17, r24


	stop_All();
     898:	0e 94 02 02 	call	0x404	; 0x404 <stop_All>
	velocity(250,255,250,250);
     89c:	8a ef       	ldi	r24, 0xFA	; 250
     89e:	6f ef       	ldi	r22, 0xFF	; 255
     8a0:	4a ef       	ldi	r20, 0xFA	; 250
     8a2:	2a ef       	ldi	r18, 0xFA	; 250
     8a4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
	switch(data)
     8a8:	81 2f       	mov	r24, r17
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	fc 01       	movw	r30, r24
     8ae:	b1 97       	sbiw	r30, 0x21	; 33
     8b0:	ed 35       	cpi	r30, 0x5D	; 93
     8b2:	f1 05       	cpc	r31, r1
     8b4:	08 f0       	brcs	.+2      	; 0x8b8 <moveMotors+0x24>
     8b6:	ce c0       	rjmp	.+412    	; 0xa54 <moveMotors+0x1c0>
     8b8:	ee 58       	subi	r30, 0x8E	; 142
     8ba:	ff 4f       	sbci	r31, 0xFF	; 255
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	05 90       	lpm	r0, Z+
     8c2:	f4 91       	lpm	r31, Z+
     8c4:	e0 2d       	mov	r30, r0
     8c6:	19 94       	eijmp
	{
		case 'u':
		case 'U':velocity(250,255,250,250);
     8c8:	8a ef       	ldi	r24, 0xFA	; 250
     8ca:	6f ef       	ldi	r22, 0xFF	; 255
     8cc:	4a ef       	ldi	r20, 0xFA	; 250
     8ce:	2a ef       	ldi	r18, 0xFA	; 250
     8d0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					move_Up();
     8d4:	0e 94 cc 01 	call	0x398	; 0x398 <move_Up>
     8d8:	bf c0       	rjmp	.+382    	; 0xa58 <moveMotors+0x1c4>
					break;
		case 'd':
		case 'D':velocity(250,255,250,250);
     8da:	8a ef       	ldi	r24, 0xFA	; 250
     8dc:	6f ef       	ldi	r22, 0xFF	; 255
     8de:	4a ef       	ldi	r20, 0xFA	; 250
     8e0:	2a ef       	ldi	r18, 0xFA	; 250
     8e2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					move_Down();
     8e6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <move_Down>
     8ea:	b6 c0       	rjmp	.+364    	; 0xa58 <moveMotors+0x1c4>
					break;
		
		case 'f':
		case 'F':
							velocity(250,250,150,150);
     8ec:	8a ef       	ldi	r24, 0xFA	; 250
     8ee:	6a ef       	ldi	r22, 0xFA	; 250
     8f0:	46 e9       	ldi	r20, 0x96	; 150
     8f2:	26 e9       	ldi	r18, 0x96	; 150
     8f4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
		//		motorsForward();

					move_Forward();
     8f8:	0e 94 de 01 	call	0x3bc	; 0x3bc <move_Forward>
     8fc:	ad c0       	rjmp	.+346    	; 0xa58 <moveMotors+0x1c4>
					break;
		case 'b':
		case 'B':
		velocity(150,155,250,250);
     8fe:	86 e9       	ldi	r24, 0x96	; 150
     900:	6b e9       	ldi	r22, 0x9B	; 155
     902:	4a ef       	ldi	r20, 0xFA	; 250
     904:	2a ef       	ldi	r18, 0xFA	; 250
     906:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					move_Backward();
     90a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <move_Backward>
     90e:	a4 c0       	rjmp	.+328    	; 0xa58 <moveMotors+0x1c4>
					break;
		case 'r':
		case 'R'://velocity(250,100,250,100);
					move_Right();
     910:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <move_Right>
     914:	a1 c0       	rjmp	.+322    	; 0xa58 <moveMotors+0x1c4>
					break;
		case 'l':
		case 'L'://velocity(100,250,100,250);
					move_Left();
     916:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <move_Left>
     91a:	9e c0       	rjmp	.+316    	; 0xa58 <moveMotors+0x1c4>
					break;
		case 's':
		case 'S':velocity(0,0,0,0);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					stop_All();
     928:	0e 94 02 02 	call	0x404	; 0x404 <stop_All>
     92c:	95 c0       	rjmp	.+298    	; 0xa58 <moveMotors+0x1c4>
					break;
		case 'o':
		case 'O':
					buzzer_off()	;
     92e:	0e 94 4c 02 	call	0x498	; 0x498 <buzzer_off>
     932:	92 c0       	rjmp	.+292    	; 0xa58 <moveMotors+0x1c4>
					break;
		case '[':velocity(250,250,250,250);
     934:	8a ef       	ldi	r24, 0xFA	; 250
     936:	6a ef       	ldi	r22, 0xFA	; 250
     938:	4a ef       	ldi	r20, 0xFA	; 250
     93a:	2a ef       	ldi	r18, 0xFA	; 250
     93c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorFrontLeftWind();
     940:	0e 94 a8 01 	call	0x350	; 0x350 <startMotorFrontLeftWind>
     944:	2c c0       	rjmp	.+88     	; 0x99e <moveMotors+0x10a>
					startMotorBackLeftWind();
					break;

		case '{'://velocity(250,0,250,0);
					velocity(250,250,250,250);
     946:	8a ef       	ldi	r24, 0xFA	; 250
     948:	6a ef       	ldi	r22, 0xFA	; 250
     94a:	4a ef       	ldi	r20, 0xFA	; 250
     94c:	2a ef       	ldi	r18, 0xFA	; 250
     94e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorFrontLeftUnwind();
     952:	0e 94 ab 01 	call	0x356	; 0x356 <startMotorFrontLeftUnwind>
     956:	72 c0       	rjmp	.+228    	; 0xa3c <moveMotors+0x1a8>
					startMotorBackLeftUnwind();
					break;
		case ']'://velocity(0,250,0,250);
					velocity(250,250,250,250);
     958:	8a ef       	ldi	r24, 0xFA	; 250
     95a:	6a ef       	ldi	r22, 0xFA	; 250
     95c:	4a ef       	ldi	r20, 0xFA	; 250
     95e:	2a ef       	ldi	r18, 0xFA	; 250
     960:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorFrontRightWind();
     964:	0e 94 ae 01 	call	0x35c	; 0x35c <startMotorFrontRightWind>
     968:	4e c0       	rjmp	.+156    	; 0xa06 <moveMotors+0x172>
					startMotorBackRightWind();
					break;

		case '}'://velocity(0,250,0,250);
					velocity(250,250,250,250);
     96a:	8a ef       	ldi	r24, 0xFA	; 250
     96c:	6a ef       	ldi	r22, 0xFA	; 250
     96e:	4a ef       	ldi	r20, 0xFA	; 250
     970:	2a ef       	ldi	r18, 0xFA	; 250
     972:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorFrontRightUnwind();
     976:	0e 94 b1 01 	call	0x362	; 0x362 <startMotorFrontRightUnwind>
     97a:	69 c0       	rjmp	.+210    	; 0xa4e <moveMotors+0x1ba>
					startMotorBackRightUnwind();
					break;			
		case 'i'://velocity(250,250,0,0);
					velocity(250,250,250,250);
     97c:	8a ef       	ldi	r24, 0xFA	; 250
     97e:	6a ef       	ldi	r22, 0xFA	; 250
     980:	4a ef       	ldi	r20, 0xFA	; 250
     982:	2a ef       	ldi	r18, 0xFA	; 250
     984:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorFrontLeftWind();
     988:	0e 94 a8 01 	call	0x350	; 0x350 <startMotorFrontLeftWind>
     98c:	2c c0       	rjmp	.+88     	; 0x9e6 <moveMotors+0x152>
					startMotorFrontRightWind();
					break;

		case 'k'://velocity(0,0,250,250);
					velocity(250,250,250,250);
     98e:	8a ef       	ldi	r24, 0xFA	; 250
     990:	6a ef       	ldi	r22, 0xFA	; 250
     992:	4a ef       	ldi	r20, 0xFA	; 250
     994:	2a ef       	ldi	r18, 0xFA	; 250
     996:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorBackRightWind();
     99a:	0e 94 b4 01 	call	0x368	; 0x368 <startMotorBackRightWind>
					startMotorBackLeftWind();
     99e:	0e 94 ba 01 	call	0x374	; 0x374 <startMotorBackLeftWind>
     9a2:	5a c0       	rjmp	.+180    	; 0xa58 <moveMotors+0x1c4>
					break;
		case 'I':velocity(250,250,0,0);
     9a4:	8a ef       	ldi	r24, 0xFA	; 250
     9a6:	6a ef       	ldi	r22, 0xFA	; 250
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorFrontLeftUnwind();
     9b0:	0e 94 ab 01 	call	0x356	; 0x356 <startMotorFrontLeftUnwind>
     9b4:	3a c0       	rjmp	.+116    	; 0xa2a <moveMotors+0x196>
					startMotorFrontRightUnwind();
					break;

		case 'K':velocity(0,0,250,250);
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	4a ef       	ldi	r20, 0xFA	; 250
     9bc:	2a ef       	ldi	r18, 0xFA	; 250
     9be:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					startMotorBackRightUnwind();
     9c2:	0e 94 b7 01 	call	0x36e	; 0x36e <startMotorBackRightUnwind>
     9c6:	3a c0       	rjmp	.+116    	; 0xa3c <moveMotors+0x1a8>
					startMotorBackLeftUnwind();
					break;
		

		case '1':velocity(250,250,250,250);
     9c8:	8a ef       	ldi	r24, 0xFA	; 250
     9ca:	6a ef       	ldi	r22, 0xFA	; 250
     9cc:	4a ef       	ldi	r20, 0xFA	; 250
     9ce:	2a ef       	ldi	r18, 0xFA	; 250
     9d0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					//velocity(250,0,0,0);
					startMotorFrontLeftWind();
     9d4:	0e 94 a8 01 	call	0x350	; 0x350 <startMotorFrontLeftWind>
     9d8:	3f c0       	rjmp	.+126    	; 0xa58 <moveMotors+0x1c4>
					//move_Forward();
					break;
		case '2':velocity(250,250,250,250);
     9da:	8a ef       	ldi	r24, 0xFA	; 250
     9dc:	6a ef       	ldi	r22, 0xFA	; 250
     9de:	4a ef       	ldi	r20, 0xFA	; 250
     9e0:	2a ef       	ldi	r18, 0xFA	; 250
     9e2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					//velocity(0,250,0,0);
					startMotorFrontRightWind();
     9e6:	0e 94 ae 01 	call	0x35c	; 0x35c <startMotorFrontRightWind>
     9ea:	36 c0       	rjmp	.+108    	; 0xa58 <moveMotors+0x1c4>
					//move_Forward();
					break;
		case '3':velocity(250,250,250,250);
     9ec:	8a ef       	ldi	r24, 0xFA	; 250
     9ee:	6a ef       	ldi	r22, 0xFA	; 250
     9f0:	4a ef       	ldi	r20, 0xFA	; 250
     9f2:	2a ef       	ldi	r18, 0xFA	; 250
     9f4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
     9f8:	d2 cf       	rjmp	.-92     	; 0x99e <moveMotors+0x10a>
					//velocity(0,0,250,0);
					startMotorBackLeftWind();
					break;
		case '4':velocity(250,250,250,250);
     9fa:	8a ef       	ldi	r24, 0xFA	; 250
     9fc:	6a ef       	ldi	r22, 0xFA	; 250
     9fe:	4a ef       	ldi	r20, 0xFA	; 250
     a00:	2a ef       	ldi	r18, 0xFA	; 250
     a02:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					//velocity(0,0,0,250);
					startMotorBackRightWind();
     a06:	0e 94 b4 01 	call	0x368	; 0x368 <startMotorBackRightWind>
     a0a:	26 c0       	rjmp	.+76     	; 0xa58 <moveMotors+0x1c4>
					break;
		case '!':	velocity(250,250,250,250);
     a0c:	8a ef       	ldi	r24, 0xFA	; 250
     a0e:	6a ef       	ldi	r22, 0xFA	; 250
     a10:	4a ef       	ldi	r20, 0xFA	; 250
     a12:	2a ef       	ldi	r18, 0xFA	; 250
     a14:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					//velocity(250,0,0,0);
					startMotorFrontLeftUnwind();
     a18:	0e 94 ab 01 	call	0x356	; 0x356 <startMotorFrontLeftUnwind>
     a1c:	1d c0       	rjmp	.+58     	; 0xa58 <moveMotors+0x1c4>
					break;
		case '@':velocity(250,250,250,250);
     a1e:	8a ef       	ldi	r24, 0xFA	; 250
     a20:	6a ef       	ldi	r22, 0xFA	; 250
     a22:	4a ef       	ldi	r20, 0xFA	; 250
     a24:	2a ef       	ldi	r18, 0xFA	; 250
     a26:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					//velocity(0,250,0,0);
					startMotorFrontRightUnwind();
     a2a:	0e 94 b1 01 	call	0x362	; 0x362 <startMotorFrontRightUnwind>
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <moveMotors+0x1c4>
					break;
		case '#':velocity(250,250,250,250);
     a30:	8a ef       	ldi	r24, 0xFA	; 250
     a32:	6a ef       	ldi	r22, 0xFA	; 250
     a34:	4a ef       	ldi	r20, 0xFA	; 250
     a36:	2a ef       	ldi	r18, 0xFA	; 250
     a38:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					//velocity(0,0,250,0);
					startMotorBackLeftUnwind();
     a3c:	0e 94 bd 01 	call	0x37a	; 0x37a <startMotorBackLeftUnwind>
     a40:	0b c0       	rjmp	.+22     	; 0xa58 <moveMotors+0x1c4>
					break;
		case '$':velocity(250,250,250,250);
     a42:	8a ef       	ldi	r24, 0xFA	; 250
     a44:	6a ef       	ldi	r22, 0xFA	; 250
     a46:	4a ef       	ldi	r20, 0xFA	; 250
     a48:	2a ef       	ldi	r18, 0xFA	; 250
     a4a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <velocity>
					//velocity(0,0,0,250);
					startMotorBackRightUnwind();
     a4e:	0e 94 b7 01 	call	0x36e	; 0x36e <startMotorBackRightUnwind>
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <moveMotors+0x1c4>
					break;



		default :
					buzzer_on();
     a54:	0e 94 48 02 	call	0x490	; 0x490 <buzzer_on>
					break;
	}
	

}
     a58:	1f 91       	pop	r17
     a5a:	08 95       	ret

00000a5c <__fixunssfsi>:
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	7b 01       	movw	r14, r22
     a66:	8c 01       	movw	r16, r24
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	5f e4       	ldi	r21, 0x4F	; 79
     a70:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gesf2>
     a74:	88 23       	and	r24, r24
     a76:	8c f0       	brlt	.+34     	; 0xa9a <__fixunssfsi+0x3e>
     a78:	c8 01       	movw	r24, r16
     a7a:	b7 01       	movw	r22, r14
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	5f e4       	ldi	r21, 0x4F	; 79
     a84:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__subsf3>
     a88:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fixsfsi>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	20 50       	subi	r18, 0x00	; 0
     a92:	30 40       	sbci	r19, 0x00	; 0
     a94:	40 40       	sbci	r20, 0x00	; 0
     a96:	50 48       	sbci	r21, 0x80	; 128
     a98:	06 c0       	rjmp	.+12     	; 0xaa6 <__fixunssfsi+0x4a>
     a9a:	c8 01       	movw	r24, r16
     a9c:	b7 01       	movw	r22, r14
     a9e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fixsfsi>
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	b9 01       	movw	r22, r18
     aa8:	ca 01       	movw	r24, r20
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	08 95       	ret

00000ab4 <_fpadd_parts>:
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e0 e6       	ldi	r30, 0x60	; 96
     aba:	f5 e0       	ldi	r31, 0x05	; 5
     abc:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__prologue_saves__>
     ac0:	dc 01       	movw	r26, r24
     ac2:	2b 01       	movw	r4, r22
     ac4:	fa 01       	movw	r30, r20
     ac6:	9c 91       	ld	r25, X
     ac8:	92 30       	cpi	r25, 0x02	; 2
     aca:	08 f4       	brcc	.+2      	; 0xace <_fpadd_parts+0x1a>
     acc:	39 c1       	rjmp	.+626    	; 0xd40 <_fpadd_parts+0x28c>
     ace:	eb 01       	movw	r28, r22
     ad0:	88 81       	ld	r24, Y
     ad2:	82 30       	cpi	r24, 0x02	; 2
     ad4:	08 f4       	brcc	.+2      	; 0xad8 <_fpadd_parts+0x24>
     ad6:	33 c1       	rjmp	.+614    	; 0xd3e <_fpadd_parts+0x28a>
     ad8:	94 30       	cpi	r25, 0x04	; 4
     ada:	69 f4       	brne	.+26     	; 0xaf6 <_fpadd_parts+0x42>
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	09 f0       	breq	.+2      	; 0xae2 <_fpadd_parts+0x2e>
     ae0:	2f c1       	rjmp	.+606    	; 0xd40 <_fpadd_parts+0x28c>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	9c 91       	ld	r25, X
     ae6:	11 97       	sbiw	r26, 0x01	; 1
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	98 17       	cp	r25, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <_fpadd_parts+0x3c>
     aee:	28 c1       	rjmp	.+592    	; 0xd40 <_fpadd_parts+0x28c>
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b2 e0       	ldi	r27, 0x02	; 2
     af4:	25 c1       	rjmp	.+586    	; 0xd40 <_fpadd_parts+0x28c>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	09 f4       	brne	.+2      	; 0xafc <_fpadd_parts+0x48>
     afa:	21 c1       	rjmp	.+578    	; 0xd3e <_fpadd_parts+0x28a>
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	a9 f4       	brne	.+42     	; 0xb2a <_fpadd_parts+0x76>
     b00:	92 30       	cpi	r25, 0x02	; 2
     b02:	09 f0       	breq	.+2      	; 0xb06 <_fpadd_parts+0x52>
     b04:	1d c1       	rjmp	.+570    	; 0xd40 <_fpadd_parts+0x28c>
     b06:	9a 01       	movw	r18, r20
     b08:	ad 01       	movw	r20, r26
     b0a:	88 e0       	ldi	r24, 0x08	; 8
     b0c:	ea 01       	movw	r28, r20
     b0e:	09 90       	ld	r0, Y+
     b10:	ae 01       	movw	r20, r28
     b12:	e9 01       	movw	r28, r18
     b14:	09 92       	st	Y+, r0
     b16:	9e 01       	movw	r18, r28
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	c1 f7       	brne	.-16     	; 0xb0c <_fpadd_parts+0x58>
     b1c:	e2 01       	movw	r28, r4
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	11 96       	adiw	r26, 0x01	; 1
     b22:	9c 91       	ld	r25, X
     b24:	89 23       	and	r24, r25
     b26:	81 83       	std	Z+1, r24	; 0x01
     b28:	08 c1       	rjmp	.+528    	; 0xd3a <_fpadd_parts+0x286>
     b2a:	92 30       	cpi	r25, 0x02	; 2
     b2c:	09 f4       	brne	.+2      	; 0xb30 <_fpadd_parts+0x7c>
     b2e:	07 c1       	rjmp	.+526    	; 0xd3e <_fpadd_parts+0x28a>
     b30:	12 96       	adiw	r26, 0x02	; 2
     b32:	2d 90       	ld	r2, X+
     b34:	3c 90       	ld	r3, X
     b36:	13 97       	sbiw	r26, 0x03	; 3
     b38:	eb 01       	movw	r28, r22
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	9b 81       	ldd	r25, Y+3	; 0x03
     b3e:	14 96       	adiw	r26, 0x04	; 4
     b40:	ad 90       	ld	r10, X+
     b42:	bd 90       	ld	r11, X+
     b44:	cd 90       	ld	r12, X+
     b46:	dc 90       	ld	r13, X
     b48:	17 97       	sbiw	r26, 0x07	; 7
     b4a:	ec 80       	ldd	r14, Y+4	; 0x04
     b4c:	fd 80       	ldd	r15, Y+5	; 0x05
     b4e:	0e 81       	ldd	r16, Y+6	; 0x06
     b50:	1f 81       	ldd	r17, Y+7	; 0x07
     b52:	91 01       	movw	r18, r2
     b54:	28 1b       	sub	r18, r24
     b56:	39 0b       	sbc	r19, r25
     b58:	b9 01       	movw	r22, r18
     b5a:	37 ff       	sbrs	r19, 7
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <_fpadd_parts+0xb2>
     b5e:	66 27       	eor	r22, r22
     b60:	77 27       	eor	r23, r23
     b62:	62 1b       	sub	r22, r18
     b64:	73 0b       	sbc	r23, r19
     b66:	60 32       	cpi	r22, 0x20	; 32
     b68:	71 05       	cpc	r23, r1
     b6a:	0c f0       	brlt	.+2      	; 0xb6e <_fpadd_parts+0xba>
     b6c:	61 c0       	rjmp	.+194    	; 0xc30 <_fpadd_parts+0x17c>
     b6e:	12 16       	cp	r1, r18
     b70:	13 06       	cpc	r1, r19
     b72:	6c f5       	brge	.+90     	; 0xbce <_fpadd_parts+0x11a>
     b74:	37 01       	movw	r6, r14
     b76:	48 01       	movw	r8, r16
     b78:	06 2e       	mov	r0, r22
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <_fpadd_parts+0xd0>
     b7c:	96 94       	lsr	r9
     b7e:	87 94       	ror	r8
     b80:	77 94       	ror	r7
     b82:	67 94       	ror	r6
     b84:	0a 94       	dec	r0
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <_fpadd_parts+0xc8>
     b88:	21 e0       	ldi	r18, 0x01	; 1
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <_fpadd_parts+0xe6>
     b92:	22 0f       	add	r18, r18
     b94:	33 1f       	adc	r19, r19
     b96:	44 1f       	adc	r20, r20
     b98:	55 1f       	adc	r21, r21
     b9a:	6a 95       	dec	r22
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <_fpadd_parts+0xde>
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	30 40       	sbci	r19, 0x00	; 0
     ba2:	40 40       	sbci	r20, 0x00	; 0
     ba4:	50 40       	sbci	r21, 0x00	; 0
     ba6:	2e 21       	and	r18, r14
     ba8:	3f 21       	and	r19, r15
     baa:	40 23       	and	r20, r16
     bac:	51 23       	and	r21, r17
     bae:	21 15       	cp	r18, r1
     bb0:	31 05       	cpc	r19, r1
     bb2:	41 05       	cpc	r20, r1
     bb4:	51 05       	cpc	r21, r1
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <_fpadd_parts+0x10c>
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	79 01       	movw	r14, r18
     bc2:	8a 01       	movw	r16, r20
     bc4:	e6 28       	or	r14, r6
     bc6:	f7 28       	or	r15, r7
     bc8:	08 29       	or	r16, r8
     bca:	19 29       	or	r17, r9
     bcc:	3c c0       	rjmp	.+120    	; 0xc46 <_fpadd_parts+0x192>
     bce:	23 2b       	or	r18, r19
     bd0:	d1 f1       	breq	.+116    	; 0xc46 <_fpadd_parts+0x192>
     bd2:	26 0e       	add	r2, r22
     bd4:	37 1e       	adc	r3, r23
     bd6:	35 01       	movw	r6, r10
     bd8:	46 01       	movw	r8, r12
     bda:	06 2e       	mov	r0, r22
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <_fpadd_parts+0x132>
     bde:	96 94       	lsr	r9
     be0:	87 94       	ror	r8
     be2:	77 94       	ror	r7
     be4:	67 94       	ror	r6
     be6:	0a 94       	dec	r0
     be8:	d2 f7       	brpl	.-12     	; 0xbde <_fpadd_parts+0x12a>
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <_fpadd_parts+0x148>
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	44 1f       	adc	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	6a 95       	dec	r22
     bfe:	d2 f7       	brpl	.-12     	; 0xbf4 <_fpadd_parts+0x140>
     c00:	21 50       	subi	r18, 0x01	; 1
     c02:	30 40       	sbci	r19, 0x00	; 0
     c04:	40 40       	sbci	r20, 0x00	; 0
     c06:	50 40       	sbci	r21, 0x00	; 0
     c08:	2a 21       	and	r18, r10
     c0a:	3b 21       	and	r19, r11
     c0c:	4c 21       	and	r20, r12
     c0e:	5d 21       	and	r21, r13
     c10:	21 15       	cp	r18, r1
     c12:	31 05       	cpc	r19, r1
     c14:	41 05       	cpc	r20, r1
     c16:	51 05       	cpc	r21, r1
     c18:	21 f0       	breq	.+8      	; 0xc22 <_fpadd_parts+0x16e>
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	59 01       	movw	r10, r18
     c24:	6a 01       	movw	r12, r20
     c26:	a6 28       	or	r10, r6
     c28:	b7 28       	or	r11, r7
     c2a:	c8 28       	or	r12, r8
     c2c:	d9 28       	or	r13, r9
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <_fpadd_parts+0x192>
     c30:	82 15       	cp	r24, r2
     c32:	93 05       	cpc	r25, r3
     c34:	2c f0       	brlt	.+10     	; 0xc40 <_fpadd_parts+0x18c>
     c36:	1c 01       	movw	r2, r24
     c38:	aa 24       	eor	r10, r10
     c3a:	bb 24       	eor	r11, r11
     c3c:	65 01       	movw	r12, r10
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <_fpadd_parts+0x192>
     c40:	ee 24       	eor	r14, r14
     c42:	ff 24       	eor	r15, r15
     c44:	87 01       	movw	r16, r14
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	9c 91       	ld	r25, X
     c4a:	d2 01       	movw	r26, r4
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	8c 91       	ld	r24, X
     c50:	98 17       	cp	r25, r24
     c52:	09 f4       	brne	.+2      	; 0xc56 <_fpadd_parts+0x1a2>
     c54:	45 c0       	rjmp	.+138    	; 0xce0 <_fpadd_parts+0x22c>
     c56:	99 23       	and	r25, r25
     c58:	39 f0       	breq	.+14     	; 0xc68 <_fpadd_parts+0x1b4>
     c5a:	a8 01       	movw	r20, r16
     c5c:	97 01       	movw	r18, r14
     c5e:	2a 19       	sub	r18, r10
     c60:	3b 09       	sbc	r19, r11
     c62:	4c 09       	sbc	r20, r12
     c64:	5d 09       	sbc	r21, r13
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <_fpadd_parts+0x1c0>
     c68:	a6 01       	movw	r20, r12
     c6a:	95 01       	movw	r18, r10
     c6c:	2e 19       	sub	r18, r14
     c6e:	3f 09       	sbc	r19, r15
     c70:	40 0b       	sbc	r20, r16
     c72:	51 0b       	sbc	r21, r17
     c74:	57 fd       	sbrc	r21, 7
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <_fpadd_parts+0x1d4>
     c78:	11 82       	std	Z+1, r1	; 0x01
     c7a:	33 82       	std	Z+3, r3	; 0x03
     c7c:	22 82       	std	Z+2, r2	; 0x02
     c7e:	24 83       	std	Z+4, r18	; 0x04
     c80:	35 83       	std	Z+5, r19	; 0x05
     c82:	46 83       	std	Z+6, r20	; 0x06
     c84:	57 83       	std	Z+7, r21	; 0x07
     c86:	1d c0       	rjmp	.+58     	; 0xcc2 <_fpadd_parts+0x20e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	81 83       	std	Z+1, r24	; 0x01
     c8c:	33 82       	std	Z+3, r3	; 0x03
     c8e:	22 82       	std	Z+2, r2	; 0x02
     c90:	88 27       	eor	r24, r24
     c92:	99 27       	eor	r25, r25
     c94:	dc 01       	movw	r26, r24
     c96:	82 1b       	sub	r24, r18
     c98:	93 0b       	sbc	r25, r19
     c9a:	a4 0b       	sbc	r26, r20
     c9c:	b5 0b       	sbc	r27, r21
     c9e:	84 83       	std	Z+4, r24	; 0x04
     ca0:	95 83       	std	Z+5, r25	; 0x05
     ca2:	a6 83       	std	Z+6, r26	; 0x06
     ca4:	b7 83       	std	Z+7, r27	; 0x07
     ca6:	0d c0       	rjmp	.+26     	; 0xcc2 <_fpadd_parts+0x20e>
     ca8:	22 0f       	add	r18, r18
     caa:	33 1f       	adc	r19, r19
     cac:	44 1f       	adc	r20, r20
     cae:	55 1f       	adc	r21, r21
     cb0:	24 83       	std	Z+4, r18	; 0x04
     cb2:	35 83       	std	Z+5, r19	; 0x05
     cb4:	46 83       	std	Z+6, r20	; 0x06
     cb6:	57 83       	std	Z+7, r21	; 0x07
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	93 83       	std	Z+3, r25	; 0x03
     cc0:	82 83       	std	Z+2, r24	; 0x02
     cc2:	24 81       	ldd	r18, Z+4	; 0x04
     cc4:	35 81       	ldd	r19, Z+5	; 0x05
     cc6:	46 81       	ldd	r20, Z+6	; 0x06
     cc8:	57 81       	ldd	r21, Z+7	; 0x07
     cca:	da 01       	movw	r26, r20
     ccc:	c9 01       	movw	r24, r18
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	a1 09       	sbc	r26, r1
     cd2:	b1 09       	sbc	r27, r1
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	af 4f       	sbci	r26, 0xFF	; 255
     cda:	bf 43       	sbci	r27, 0x3F	; 63
     cdc:	28 f3       	brcs	.-54     	; 0xca8 <_fpadd_parts+0x1f4>
     cde:	0b c0       	rjmp	.+22     	; 0xcf6 <_fpadd_parts+0x242>
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	33 82       	std	Z+3, r3	; 0x03
     ce4:	22 82       	std	Z+2, r2	; 0x02
     ce6:	ea 0c       	add	r14, r10
     ce8:	fb 1c       	adc	r15, r11
     cea:	0c 1d       	adc	r16, r12
     cec:	1d 1d       	adc	r17, r13
     cee:	e4 82       	std	Z+4, r14	; 0x04
     cf0:	f5 82       	std	Z+5, r15	; 0x05
     cf2:	06 83       	std	Z+6, r16	; 0x06
     cf4:	17 83       	std	Z+7, r17	; 0x07
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	80 83       	st	Z, r24
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	57 ff       	sbrs	r21, 7
     d04:	1a c0       	rjmp	.+52     	; 0xd3a <_fpadd_parts+0x286>
     d06:	c9 01       	movw	r24, r18
     d08:	aa 27       	eor	r26, r26
     d0a:	97 fd       	sbrc	r25, 7
     d0c:	a0 95       	com	r26
     d0e:	ba 2f       	mov	r27, r26
     d10:	81 70       	andi	r24, 0x01	; 1
     d12:	90 70       	andi	r25, 0x00	; 0
     d14:	a0 70       	andi	r26, 0x00	; 0
     d16:	b0 70       	andi	r27, 0x00	; 0
     d18:	56 95       	lsr	r21
     d1a:	47 95       	ror	r20
     d1c:	37 95       	ror	r19
     d1e:	27 95       	ror	r18
     d20:	82 2b       	or	r24, r18
     d22:	93 2b       	or	r25, r19
     d24:	a4 2b       	or	r26, r20
     d26:	b5 2b       	or	r27, r21
     d28:	84 83       	std	Z+4, r24	; 0x04
     d2a:	95 83       	std	Z+5, r25	; 0x05
     d2c:	a6 83       	std	Z+6, r26	; 0x06
     d2e:	b7 83       	std	Z+7, r27	; 0x07
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	93 83       	std	Z+3, r25	; 0x03
     d38:	82 83       	std	Z+2, r24	; 0x02
     d3a:	df 01       	movw	r26, r30
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <_fpadd_parts+0x28c>
     d3e:	d2 01       	movw	r26, r4
     d40:	cd 01       	movw	r24, r26
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	e2 e1       	ldi	r30, 0x12	; 18
     d48:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__epilogue_restores__>

00000d4c <__subsf3>:
     d4c:	a0 e2       	ldi	r26, 0x20	; 32
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ec ea       	ldi	r30, 0xAC	; 172
     d52:	f6 e0       	ldi	r31, 0x06	; 6
     d54:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__prologue_saves__+0x18>
     d58:	69 83       	std	Y+1, r22	; 0x01
     d5a:	7a 83       	std	Y+2, r23	; 0x02
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	2d 83       	std	Y+5, r18	; 0x05
     d62:	3e 83       	std	Y+6, r19	; 0x06
     d64:	4f 83       	std	Y+7, r20	; 0x07
     d66:	58 87       	std	Y+8, r21	; 0x08
     d68:	e9 e0       	ldi	r30, 0x09	; 9
     d6a:	ee 2e       	mov	r14, r30
     d6c:	f1 2c       	mov	r15, r1
     d6e:	ec 0e       	add	r14, r28
     d70:	fd 1e       	adc	r15, r29
     d72:	ce 01       	movw	r24, r28
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	b7 01       	movw	r22, r14
     d78:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     d7c:	8e 01       	movw	r16, r28
     d7e:	0f 5e       	subi	r16, 0xEF	; 239
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	ce 01       	movw	r24, r28
     d84:	05 96       	adiw	r24, 0x05	; 5
     d86:	b8 01       	movw	r22, r16
     d88:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     d8c:	8a 89       	ldd	r24, Y+18	; 0x12
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	89 27       	eor	r24, r25
     d92:	8a 8b       	std	Y+18, r24	; 0x12
     d94:	c7 01       	movw	r24, r14
     d96:	b8 01       	movw	r22, r16
     d98:	ae 01       	movw	r20, r28
     d9a:	47 5e       	subi	r20, 0xE7	; 231
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	0e 94 5a 05 	call	0xab4	; 0xab4 <_fpadd_parts>
     da2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__pack_f>
     da6:	a0 96       	adiw	r28, 0x20	; 32
     da8:	e6 e0       	ldi	r30, 0x06	; 6
     daa:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__epilogue_restores__+0x18>

00000dae <__addsf3>:
     dae:	a0 e2       	ldi	r26, 0x20	; 32
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ed ed       	ldi	r30, 0xDD	; 221
     db4:	f6 e0       	ldi	r31, 0x06	; 6
     db6:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__prologue_saves__+0x18>
     dba:	69 83       	std	Y+1, r22	; 0x01
     dbc:	7a 83       	std	Y+2, r23	; 0x02
     dbe:	8b 83       	std	Y+3, r24	; 0x03
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	2d 83       	std	Y+5, r18	; 0x05
     dc4:	3e 83       	std	Y+6, r19	; 0x06
     dc6:	4f 83       	std	Y+7, r20	; 0x07
     dc8:	58 87       	std	Y+8, r21	; 0x08
     dca:	f9 e0       	ldi	r31, 0x09	; 9
     dcc:	ef 2e       	mov	r14, r31
     dce:	f1 2c       	mov	r15, r1
     dd0:	ec 0e       	add	r14, r28
     dd2:	fd 1e       	adc	r15, r29
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	b7 01       	movw	r22, r14
     dda:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     dde:	8e 01       	movw	r16, r28
     de0:	0f 5e       	subi	r16, 0xEF	; 239
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	ce 01       	movw	r24, r28
     de6:	05 96       	adiw	r24, 0x05	; 5
     de8:	b8 01       	movw	r22, r16
     dea:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     dee:	c7 01       	movw	r24, r14
     df0:	b8 01       	movw	r22, r16
     df2:	ae 01       	movw	r20, r28
     df4:	47 5e       	subi	r20, 0xE7	; 231
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	0e 94 5a 05 	call	0xab4	; 0xab4 <_fpadd_parts>
     dfc:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__pack_f>
     e00:	a0 96       	adiw	r28, 0x20	; 32
     e02:	e6 e0       	ldi	r30, 0x06	; 6
     e04:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__epilogue_restores__+0x18>

00000e08 <__divsf3>:
     e08:	a8 e1       	ldi	r26, 0x18	; 24
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ea e0       	ldi	r30, 0x0A	; 10
     e0e:	f7 e0       	ldi	r31, 0x07	; 7
     e10:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__prologue_saves__+0x10>
     e14:	69 83       	std	Y+1, r22	; 0x01
     e16:	7a 83       	std	Y+2, r23	; 0x02
     e18:	8b 83       	std	Y+3, r24	; 0x03
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	2d 83       	std	Y+5, r18	; 0x05
     e1e:	3e 83       	std	Y+6, r19	; 0x06
     e20:	4f 83       	std	Y+7, r20	; 0x07
     e22:	58 87       	std	Y+8, r21	; 0x08
     e24:	b9 e0       	ldi	r27, 0x09	; 9
     e26:	eb 2e       	mov	r14, r27
     e28:	f1 2c       	mov	r15, r1
     e2a:	ec 0e       	add	r14, r28
     e2c:	fd 1e       	adc	r15, r29
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	b7 01       	movw	r22, r14
     e34:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     e38:	8e 01       	movw	r16, r28
     e3a:	0f 5e       	subi	r16, 0xEF	; 239
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	ce 01       	movw	r24, r28
     e40:	05 96       	adiw	r24, 0x05	; 5
     e42:	b8 01       	movw	r22, r16
     e44:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     e48:	29 85       	ldd	r18, Y+9	; 0x09
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	08 f4       	brcc	.+2      	; 0xe50 <__divsf3+0x48>
     e4e:	7e c0       	rjmp	.+252    	; 0xf4c <__divsf3+0x144>
     e50:	39 89       	ldd	r19, Y+17	; 0x11
     e52:	32 30       	cpi	r19, 0x02	; 2
     e54:	10 f4       	brcc	.+4      	; 0xe5a <__divsf3+0x52>
     e56:	b8 01       	movw	r22, r16
     e58:	7c c0       	rjmp	.+248    	; 0xf52 <__divsf3+0x14a>
     e5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e5c:	9a 89       	ldd	r25, Y+18	; 0x12
     e5e:	89 27       	eor	r24, r25
     e60:	8a 87       	std	Y+10, r24	; 0x0a
     e62:	24 30       	cpi	r18, 0x04	; 4
     e64:	11 f0       	breq	.+4      	; 0xe6a <__divsf3+0x62>
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 f4       	brne	.+12     	; 0xe76 <__divsf3+0x6e>
     e6a:	23 17       	cp	r18, r19
     e6c:	09 f0       	breq	.+2      	; 0xe70 <__divsf3+0x68>
     e6e:	6e c0       	rjmp	.+220    	; 0xf4c <__divsf3+0x144>
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	72 e0       	ldi	r23, 0x02	; 2
     e74:	6e c0       	rjmp	.+220    	; 0xf52 <__divsf3+0x14a>
     e76:	34 30       	cpi	r19, 0x04	; 4
     e78:	39 f4       	brne	.+14     	; 0xe88 <__divsf3+0x80>
     e7a:	1d 86       	std	Y+13, r1	; 0x0d
     e7c:	1e 86       	std	Y+14, r1	; 0x0e
     e7e:	1f 86       	std	Y+15, r1	; 0x0f
     e80:	18 8a       	std	Y+16, r1	; 0x10
     e82:	1c 86       	std	Y+12, r1	; 0x0c
     e84:	1b 86       	std	Y+11, r1	; 0x0b
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__divsf3+0x88>
     e88:	32 30       	cpi	r19, 0x02	; 2
     e8a:	21 f4       	brne	.+8      	; 0xe94 <__divsf3+0x8c>
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	89 87       	std	Y+9, r24	; 0x09
     e90:	b7 01       	movw	r22, r14
     e92:	5f c0       	rjmp	.+190    	; 0xf52 <__divsf3+0x14a>
     e94:	2b 85       	ldd	r18, Y+11	; 0x0b
     e96:	3c 85       	ldd	r19, Y+12	; 0x0c
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	28 1b       	sub	r18, r24
     e9e:	39 0b       	sbc	r19, r25
     ea0:	3c 87       	std	Y+12, r19	; 0x0c
     ea2:	2b 87       	std	Y+11, r18	; 0x0b
     ea4:	ed 84       	ldd	r14, Y+13	; 0x0d
     ea6:	fe 84       	ldd	r15, Y+14	; 0x0e
     ea8:	0f 85       	ldd	r16, Y+15	; 0x0f
     eaa:	18 89       	ldd	r17, Y+16	; 0x10
     eac:	ad 88       	ldd	r10, Y+21	; 0x15
     eae:	be 88       	ldd	r11, Y+22	; 0x16
     eb0:	cf 88       	ldd	r12, Y+23	; 0x17
     eb2:	d8 8c       	ldd	r13, Y+24	; 0x18
     eb4:	ea 14       	cp	r14, r10
     eb6:	fb 04       	cpc	r15, r11
     eb8:	0c 05       	cpc	r16, r12
     eba:	1d 05       	cpc	r17, r13
     ebc:	40 f4       	brcc	.+16     	; 0xece <__divsf3+0xc6>
     ebe:	ee 0c       	add	r14, r14
     ec0:	ff 1c       	adc	r15, r15
     ec2:	00 1f       	adc	r16, r16
     ec4:	11 1f       	adc	r17, r17
     ec6:	21 50       	subi	r18, 0x01	; 1
     ec8:	30 40       	sbci	r19, 0x00	; 0
     eca:	3c 87       	std	Y+12, r19	; 0x0c
     ecc:	2b 87       	std	Y+11, r18	; 0x0b
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e4       	ldi	r27, 0x40	; 64
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	ea 14       	cp	r14, r10
     ee4:	fb 04       	cpc	r15, r11
     ee6:	0c 05       	cpc	r16, r12
     ee8:	1d 05       	cpc	r17, r13
     eea:	40 f0       	brcs	.+16     	; 0xefc <__divsf3+0xf4>
     eec:	28 2b       	or	r18, r24
     eee:	39 2b       	or	r19, r25
     ef0:	4a 2b       	or	r20, r26
     ef2:	5b 2b       	or	r21, r27
     ef4:	ea 18       	sub	r14, r10
     ef6:	fb 08       	sbc	r15, r11
     ef8:	0c 09       	sbc	r16, r12
     efa:	1d 09       	sbc	r17, r13
     efc:	b6 95       	lsr	r27
     efe:	a7 95       	ror	r26
     f00:	97 95       	ror	r25
     f02:	87 95       	ror	r24
     f04:	ee 0c       	add	r14, r14
     f06:	ff 1c       	adc	r15, r15
     f08:	00 1f       	adc	r16, r16
     f0a:	11 1f       	adc	r17, r17
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	6f 31       	cpi	r22, 0x1F	; 31
     f12:	71 05       	cpc	r23, r1
     f14:	31 f7       	brne	.-52     	; 0xee2 <__divsf3+0xda>
     f16:	da 01       	movw	r26, r20
     f18:	c9 01       	movw	r24, r18
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	a0 70       	andi	r26, 0x00	; 0
     f20:	b0 70       	andi	r27, 0x00	; 0
     f22:	80 34       	cpi	r24, 0x40	; 64
     f24:	91 05       	cpc	r25, r1
     f26:	a1 05       	cpc	r26, r1
     f28:	b1 05       	cpc	r27, r1
     f2a:	61 f4       	brne	.+24     	; 0xf44 <__divsf3+0x13c>
     f2c:	27 fd       	sbrc	r18, 7
     f2e:	0a c0       	rjmp	.+20     	; 0xf44 <__divsf3+0x13c>
     f30:	e1 14       	cp	r14, r1
     f32:	f1 04       	cpc	r15, r1
     f34:	01 05       	cpc	r16, r1
     f36:	11 05       	cpc	r17, r1
     f38:	29 f0       	breq	.+10     	; 0xf44 <__divsf3+0x13c>
     f3a:	20 5c       	subi	r18, 0xC0	; 192
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	4f 4f       	sbci	r20, 0xFF	; 255
     f40:	5f 4f       	sbci	r21, 0xFF	; 255
     f42:	20 78       	andi	r18, 0x80	; 128
     f44:	2d 87       	std	Y+13, r18	; 0x0d
     f46:	3e 87       	std	Y+14, r19	; 0x0e
     f48:	4f 87       	std	Y+15, r20	; 0x0f
     f4a:	58 8b       	std	Y+16, r21	; 0x10
     f4c:	be 01       	movw	r22, r28
     f4e:	67 5f       	subi	r22, 0xF7	; 247
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	cb 01       	movw	r24, r22
     f54:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__pack_f>
     f58:	68 96       	adiw	r28, 0x18	; 24
     f5a:	ea e0       	ldi	r30, 0x0A	; 10
     f5c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__epilogue_restores__+0x10>

00000f60 <__gesf2>:
     f60:	a8 e1       	ldi	r26, 0x18	; 24
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e6 eb       	ldi	r30, 0xB6	; 182
     f66:	f7 e0       	ldi	r31, 0x07	; 7
     f68:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__prologue_saves__+0x18>
     f6c:	69 83       	std	Y+1, r22	; 0x01
     f6e:	7a 83       	std	Y+2, r23	; 0x02
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	2d 83       	std	Y+5, r18	; 0x05
     f76:	3e 83       	std	Y+6, r19	; 0x06
     f78:	4f 83       	std	Y+7, r20	; 0x07
     f7a:	58 87       	std	Y+8, r21	; 0x08
     f7c:	89 e0       	ldi	r24, 0x09	; 9
     f7e:	e8 2e       	mov	r14, r24
     f80:	f1 2c       	mov	r15, r1
     f82:	ec 0e       	add	r14, r28
     f84:	fd 1e       	adc	r15, r29
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	b7 01       	movw	r22, r14
     f8c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     f90:	8e 01       	movw	r16, r28
     f92:	0f 5e       	subi	r16, 0xEF	; 239
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	ce 01       	movw	r24, r28
     f98:	05 96       	adiw	r24, 0x05	; 5
     f9a:	b8 01       	movw	r22, r16
     f9c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	40 f0       	brcs	.+16     	; 0xfb6 <__gesf2+0x56>
     fa6:	89 89       	ldd	r24, Y+17	; 0x11
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	28 f0       	brcs	.+10     	; 0xfb6 <__gesf2+0x56>
     fac:	c7 01       	movw	r24, r14
     fae:	b8 01       	movw	r22, r16
     fb0:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fpcmp_parts_f>
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <__gesf2+0x58>
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	68 96       	adiw	r28, 0x18	; 24
     fba:	e6 e0       	ldi	r30, 0x06	; 6
     fbc:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__epilogue_restores__+0x18>

00000fc0 <__fixsfsi>:
     fc0:	ac e0       	ldi	r26, 0x0C	; 12
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 ee       	ldi	r30, 0xE6	; 230
     fc6:	f7 e0       	ldi	r31, 0x07	; 7
     fc8:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__prologue_saves__+0x20>
     fcc:	69 83       	std	Y+1, r22	; 0x01
     fce:	7a 83       	std	Y+2, r23	; 0x02
     fd0:	8b 83       	std	Y+3, r24	; 0x03
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	be 01       	movw	r22, r28
     fda:	6b 5f       	subi	r22, 0xFB	; 251
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__unpack_f>
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	61 f1       	breq	.+88     	; 0x1040 <__fixsfsi+0x80>
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	50 f1       	brcs	.+84     	; 0x1040 <__fixsfsi+0x80>
     fec:	84 30       	cpi	r24, 0x04	; 4
     fee:	21 f4       	brne	.+8      	; 0xff8 <__fixsfsi+0x38>
     ff0:	8e 81       	ldd	r24, Y+6	; 0x06
     ff2:	88 23       	and	r24, r24
     ff4:	51 f1       	breq	.+84     	; 0x104a <__fixsfsi+0x8a>
     ff6:	2e c0       	rjmp	.+92     	; 0x1054 <__fixsfsi+0x94>
     ff8:	2f 81       	ldd	r18, Y+7	; 0x07
     ffa:	38 85       	ldd	r19, Y+8	; 0x08
     ffc:	37 fd       	sbrc	r19, 7
     ffe:	20 c0       	rjmp	.+64     	; 0x1040 <__fixsfsi+0x80>
    1000:	6e 81       	ldd	r22, Y+6	; 0x06
    1002:	2f 31       	cpi	r18, 0x1F	; 31
    1004:	31 05       	cpc	r19, r1
    1006:	1c f0       	brlt	.+6      	; 0x100e <__fixsfsi+0x4e>
    1008:	66 23       	and	r22, r22
    100a:	f9 f0       	breq	.+62     	; 0x104a <__fixsfsi+0x8a>
    100c:	23 c0       	rjmp	.+70     	; 0x1054 <__fixsfsi+0x94>
    100e:	8e e1       	ldi	r24, 0x1E	; 30
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	82 1b       	sub	r24, r18
    1014:	93 0b       	sbc	r25, r19
    1016:	29 85       	ldd	r18, Y+9	; 0x09
    1018:	3a 85       	ldd	r19, Y+10	; 0x0a
    101a:	4b 85       	ldd	r20, Y+11	; 0x0b
    101c:	5c 85       	ldd	r21, Y+12	; 0x0c
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <__fixsfsi+0x68>
    1020:	56 95       	lsr	r21
    1022:	47 95       	ror	r20
    1024:	37 95       	ror	r19
    1026:	27 95       	ror	r18
    1028:	8a 95       	dec	r24
    102a:	d2 f7       	brpl	.-12     	; 0x1020 <__fixsfsi+0x60>
    102c:	66 23       	and	r22, r22
    102e:	b1 f0       	breq	.+44     	; 0x105c <__fixsfsi+0x9c>
    1030:	50 95       	com	r21
    1032:	40 95       	com	r20
    1034:	30 95       	com	r19
    1036:	21 95       	neg	r18
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	4f 4f       	sbci	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	0e c0       	rjmp	.+28     	; 0x105c <__fixsfsi+0x9c>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	09 c0       	rjmp	.+18     	; 0x105c <__fixsfsi+0x9c>
    104a:	2f ef       	ldi	r18, 0xFF	; 255
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	4f ef       	ldi	r20, 0xFF	; 255
    1050:	5f e7       	ldi	r21, 0x7F	; 127
    1052:	04 c0       	rjmp	.+8      	; 0x105c <__fixsfsi+0x9c>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e8       	ldi	r21, 0x80	; 128
    105c:	b9 01       	movw	r22, r18
    105e:	ca 01       	movw	r24, r20
    1060:	2c 96       	adiw	r28, 0x0c	; 12
    1062:	e2 e0       	ldi	r30, 0x02	; 2
    1064:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__epilogue_restores__+0x20>

00001068 <__floatunsisf>:
    1068:	a8 e0       	ldi	r26, 0x08	; 8
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__prologue_saves__+0x10>
    1074:	7b 01       	movw	r14, r22
    1076:	8c 01       	movw	r16, r24
    1078:	61 15       	cp	r22, r1
    107a:	71 05       	cpc	r23, r1
    107c:	81 05       	cpc	r24, r1
    107e:	91 05       	cpc	r25, r1
    1080:	19 f4       	brne	.+6      	; 0x1088 <__floatunsisf+0x20>
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	60 c0       	rjmp	.+192    	; 0x1148 <__floatunsisf+0xe0>
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	8e e1       	ldi	r24, 0x1E	; 30
    108e:	c8 2e       	mov	r12, r24
    1090:	d1 2c       	mov	r13, r1
    1092:	dc 82       	std	Y+4, r13	; 0x04
    1094:	cb 82       	std	Y+3, r12	; 0x03
    1096:	ed 82       	std	Y+5, r14	; 0x05
    1098:	fe 82       	std	Y+6, r15	; 0x06
    109a:	0f 83       	std	Y+7, r16	; 0x07
    109c:	18 87       	std	Y+8, r17	; 0x08
    109e:	c8 01       	movw	r24, r16
    10a0:	b7 01       	movw	r22, r14
    10a2:	0e 94 ad 08 	call	0x115a	; 0x115a <__clzsi2>
    10a6:	fc 01       	movw	r30, r24
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	f7 ff       	sbrs	r31, 7
    10ac:	3b c0       	rjmp	.+118    	; 0x1124 <__floatunsisf+0xbc>
    10ae:	22 27       	eor	r18, r18
    10b0:	33 27       	eor	r19, r19
    10b2:	2e 1b       	sub	r18, r30
    10b4:	3f 0b       	sbc	r19, r31
    10b6:	57 01       	movw	r10, r14
    10b8:	68 01       	movw	r12, r16
    10ba:	02 2e       	mov	r0, r18
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <__floatunsisf+0x5e>
    10be:	d6 94       	lsr	r13
    10c0:	c7 94       	ror	r12
    10c2:	b7 94       	ror	r11
    10c4:	a7 94       	ror	r10
    10c6:	0a 94       	dec	r0
    10c8:	d2 f7       	brpl	.-12     	; 0x10be <__floatunsisf+0x56>
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <__floatunsisf+0x7c>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	aa 1f       	adc	r26, r26
    10e2:	bb 1f       	adc	r27, r27
    10e4:	2a 95       	dec	r18
    10e6:	d2 f7       	brpl	.-12     	; 0x10dc <__floatunsisf+0x74>
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	a1 09       	sbc	r26, r1
    10ec:	b1 09       	sbc	r27, r1
    10ee:	8e 21       	and	r24, r14
    10f0:	9f 21       	and	r25, r15
    10f2:	a0 23       	and	r26, r16
    10f4:	b1 23       	and	r27, r17
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	a1 05       	cpc	r26, r1
    10fa:	b1 05       	cpc	r27, r1
    10fc:	21 f0       	breq	.+8      	; 0x1106 <__floatunsisf+0x9e>
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	4a 29       	or	r20, r10
    1108:	5b 29       	or	r21, r11
    110a:	6c 29       	or	r22, r12
    110c:	7d 29       	or	r23, r13
    110e:	4d 83       	std	Y+5, r20	; 0x05
    1110:	5e 83       	std	Y+6, r21	; 0x06
    1112:	6f 83       	std	Y+7, r22	; 0x07
    1114:	78 87       	std	Y+8, r23	; 0x08
    1116:	8e e1       	ldi	r24, 0x1E	; 30
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	8e 1b       	sub	r24, r30
    111c:	9f 0b       	sbc	r25, r31
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	12 c0       	rjmp	.+36     	; 0x1148 <__floatunsisf+0xe0>
    1124:	30 97       	sbiw	r30, 0x00	; 0
    1126:	81 f0       	breq	.+32     	; 0x1148 <__floatunsisf+0xe0>
    1128:	0e 2e       	mov	r0, r30
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <__floatunsisf+0xcc>
    112c:	ee 0c       	add	r14, r14
    112e:	ff 1c       	adc	r15, r15
    1130:	00 1f       	adc	r16, r16
    1132:	11 1f       	adc	r17, r17
    1134:	0a 94       	dec	r0
    1136:	d2 f7       	brpl	.-12     	; 0x112c <__floatunsisf+0xc4>
    1138:	ed 82       	std	Y+5, r14	; 0x05
    113a:	fe 82       	std	Y+6, r15	; 0x06
    113c:	0f 83       	std	Y+7, r16	; 0x07
    113e:	18 87       	std	Y+8, r17	; 0x08
    1140:	ce 1a       	sub	r12, r30
    1142:	df 0a       	sbc	r13, r31
    1144:	dc 82       	std	Y+4, r13	; 0x04
    1146:	cb 82       	std	Y+3, r12	; 0x03
    1148:	1a 82       	std	Y+2, r1	; 0x02
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__pack_f>
    1152:	28 96       	adiw	r28, 0x08	; 8
    1154:	ea e0       	ldi	r30, 0x0A	; 10
    1156:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__epilogue_restores__+0x10>

0000115a <__clzsi2>:
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	7b 01       	movw	r14, r22
    1164:	8c 01       	movw	r16, r24
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	e8 16       	cp	r14, r24
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	f8 06       	cpc	r15, r24
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	08 07       	cpc	r16, r24
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	18 07       	cpc	r17, r24
    1176:	88 f4       	brcc	.+34     	; 0x119a <__clzsi2+0x40>
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	e8 16       	cp	r14, r24
    117c:	f1 04       	cpc	r15, r1
    117e:	01 05       	cpc	r16, r1
    1180:	11 05       	cpc	r17, r1
    1182:	31 f0       	breq	.+12     	; 0x1190 <__clzsi2+0x36>
    1184:	28 f0       	brcs	.+10     	; 0x1190 <__clzsi2+0x36>
    1186:	88 e0       	ldi	r24, 0x08	; 8
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	17 c0       	rjmp	.+46     	; 0x11be <__clzsi2+0x64>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a0 e0       	ldi	r26, 0x00	; 0
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	12 c0       	rjmp	.+36     	; 0x11be <__clzsi2+0x64>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	e8 16       	cp	r14, r24
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	f8 06       	cpc	r15, r24
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 07       	cpc	r16, r24
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	18 07       	cpc	r17, r24
    11aa:	28 f0       	brcs	.+10     	; 0x11b6 <__clzsi2+0x5c>
    11ac:	88 e1       	ldi	r24, 0x18	; 24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <__clzsi2+0x64>
    11b6:	80 e1       	ldi	r24, 0x10	; 16
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a0 e0       	ldi	r26, 0x00	; 0
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	20 e2       	ldi	r18, 0x20	; 32
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	28 1b       	sub	r18, r24
    11c8:	39 0b       	sbc	r19, r25
    11ca:	4a 0b       	sbc	r20, r26
    11cc:	5b 0b       	sbc	r21, r27
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <__clzsi2+0x7e>
    11d0:	16 95       	lsr	r17
    11d2:	07 95       	ror	r16
    11d4:	f7 94       	ror	r15
    11d6:	e7 94       	ror	r14
    11d8:	8a 95       	dec	r24
    11da:	d2 f7       	brpl	.-12     	; 0x11d0 <__clzsi2+0x76>
    11dc:	f7 01       	movw	r30, r14
    11de:	e8 5f       	subi	r30, 0xF8	; 248
    11e0:	fd 4f       	sbci	r31, 0xFD	; 253
    11e2:	80 81       	ld	r24, Z
    11e4:	28 1b       	sub	r18, r24
    11e6:	31 09       	sbc	r19, r1
    11e8:	41 09       	sbc	r20, r1
    11ea:	51 09       	sbc	r21, r1
    11ec:	c9 01       	movw	r24, r18
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	08 95       	ret

000011f8 <__pack_f>:
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	fc 01       	movw	r30, r24
    1204:	e4 80       	ldd	r14, Z+4	; 0x04
    1206:	f5 80       	ldd	r15, Z+5	; 0x05
    1208:	06 81       	ldd	r16, Z+6	; 0x06
    120a:	17 81       	ldd	r17, Z+7	; 0x07
    120c:	d1 80       	ldd	r13, Z+1	; 0x01
    120e:	80 81       	ld	r24, Z
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	48 f4       	brcc	.+18     	; 0x1226 <__pack_f+0x2e>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a0 e1       	ldi	r26, 0x10	; 16
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 2a       	or	r14, r24
    121e:	f9 2a       	or	r15, r25
    1220:	0a 2b       	or	r16, r26
    1222:	1b 2b       	or	r17, r27
    1224:	a5 c0       	rjmp	.+330    	; 0x1370 <__pack_f+0x178>
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	09 f4       	brne	.+2      	; 0x122c <__pack_f+0x34>
    122a:	9f c0       	rjmp	.+318    	; 0x136a <__pack_f+0x172>
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	21 f4       	brne	.+8      	; 0x1238 <__pack_f+0x40>
    1230:	ee 24       	eor	r14, r14
    1232:	ff 24       	eor	r15, r15
    1234:	87 01       	movw	r16, r14
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <__pack_f+0x4a>
    1238:	e1 14       	cp	r14, r1
    123a:	f1 04       	cpc	r15, r1
    123c:	01 05       	cpc	r16, r1
    123e:	11 05       	cpc	r17, r1
    1240:	19 f4       	brne	.+6      	; 0x1248 <__pack_f+0x50>
    1242:	e0 e0       	ldi	r30, 0x00	; 0
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	96 c0       	rjmp	.+300    	; 0x1374 <__pack_f+0x17c>
    1248:	62 81       	ldd	r22, Z+2	; 0x02
    124a:	73 81       	ldd	r23, Z+3	; 0x03
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	62 38       	cpi	r22, 0x82	; 130
    1250:	79 07       	cpc	r23, r25
    1252:	0c f0       	brlt	.+2      	; 0x1256 <__pack_f+0x5e>
    1254:	5b c0       	rjmp	.+182    	; 0x130c <__pack_f+0x114>
    1256:	22 e8       	ldi	r18, 0x82	; 130
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	26 1b       	sub	r18, r22
    125c:	37 0b       	sbc	r19, r23
    125e:	2a 31       	cpi	r18, 0x1A	; 26
    1260:	31 05       	cpc	r19, r1
    1262:	2c f0       	brlt	.+10     	; 0x126e <__pack_f+0x76>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	2a c0       	rjmp	.+84     	; 0x12c2 <__pack_f+0xca>
    126e:	b8 01       	movw	r22, r16
    1270:	a7 01       	movw	r20, r14
    1272:	02 2e       	mov	r0, r18
    1274:	04 c0       	rjmp	.+8      	; 0x127e <__pack_f+0x86>
    1276:	76 95       	lsr	r23
    1278:	67 95       	ror	r22
    127a:	57 95       	ror	r21
    127c:	47 95       	ror	r20
    127e:	0a 94       	dec	r0
    1280:	d2 f7       	brpl	.-12     	; 0x1276 <__pack_f+0x7e>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a0 e0       	ldi	r26, 0x00	; 0
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <__pack_f+0x9c>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	aa 1f       	adc	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	2a 95       	dec	r18
    1296:	d2 f7       	brpl	.-12     	; 0x128c <__pack_f+0x94>
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	a1 09       	sbc	r26, r1
    129c:	b1 09       	sbc	r27, r1
    129e:	8e 21       	and	r24, r14
    12a0:	9f 21       	and	r25, r15
    12a2:	a0 23       	and	r26, r16
    12a4:	b1 23       	and	r27, r17
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	a1 05       	cpc	r26, r1
    12aa:	b1 05       	cpc	r27, r1
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <__pack_f+0xbe>
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	9a 01       	movw	r18, r20
    12b8:	ab 01       	movw	r20, r22
    12ba:	28 2b       	or	r18, r24
    12bc:	39 2b       	or	r19, r25
    12be:	4a 2b       	or	r20, r26
    12c0:	5b 2b       	or	r21, r27
    12c2:	da 01       	movw	r26, r20
    12c4:	c9 01       	movw	r24, r18
    12c6:	8f 77       	andi	r24, 0x7F	; 127
    12c8:	90 70       	andi	r25, 0x00	; 0
    12ca:	a0 70       	andi	r26, 0x00	; 0
    12cc:	b0 70       	andi	r27, 0x00	; 0
    12ce:	80 34       	cpi	r24, 0x40	; 64
    12d0:	91 05       	cpc	r25, r1
    12d2:	a1 05       	cpc	r26, r1
    12d4:	b1 05       	cpc	r27, r1
    12d6:	39 f4       	brne	.+14     	; 0x12e6 <__pack_f+0xee>
    12d8:	27 ff       	sbrs	r18, 7
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <__pack_f+0xf6>
    12dc:	20 5c       	subi	r18, 0xC0	; 192
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	4f 4f       	sbci	r20, 0xFF	; 255
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <__pack_f+0xf6>
    12e6:	21 5c       	subi	r18, 0xC1	; 193
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	4f 4f       	sbci	r20, 0xFF	; 255
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	e0 e0       	ldi	r30, 0x00	; 0
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	20 30       	cpi	r18, 0x00	; 0
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	3a 07       	cpc	r19, r26
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	4a 07       	cpc	r20, r26
    12fc:	a0 e4       	ldi	r26, 0x40	; 64
    12fe:	5a 07       	cpc	r21, r26
    1300:	10 f0       	brcs	.+4      	; 0x1306 <__pack_f+0x10e>
    1302:	e1 e0       	ldi	r30, 0x01	; 1
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	79 01       	movw	r14, r18
    1308:	8a 01       	movw	r16, r20
    130a:	27 c0       	rjmp	.+78     	; 0x135a <__pack_f+0x162>
    130c:	60 38       	cpi	r22, 0x80	; 128
    130e:	71 05       	cpc	r23, r1
    1310:	64 f5       	brge	.+88     	; 0x136a <__pack_f+0x172>
    1312:	fb 01       	movw	r30, r22
    1314:	e1 58       	subi	r30, 0x81	; 129
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	d8 01       	movw	r26, r16
    131a:	c7 01       	movw	r24, r14
    131c:	8f 77       	andi	r24, 0x7F	; 127
    131e:	90 70       	andi	r25, 0x00	; 0
    1320:	a0 70       	andi	r26, 0x00	; 0
    1322:	b0 70       	andi	r27, 0x00	; 0
    1324:	80 34       	cpi	r24, 0x40	; 64
    1326:	91 05       	cpc	r25, r1
    1328:	a1 05       	cpc	r26, r1
    132a:	b1 05       	cpc	r27, r1
    132c:	39 f4       	brne	.+14     	; 0x133c <__pack_f+0x144>
    132e:	e7 fe       	sbrs	r14, 7
    1330:	0d c0       	rjmp	.+26     	; 0x134c <__pack_f+0x154>
    1332:	80 e4       	ldi	r24, 0x40	; 64
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <__pack_f+0x14c>
    133c:	8f e3       	ldi	r24, 0x3F	; 63
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e8 0e       	add	r14, r24
    1346:	f9 1e       	adc	r15, r25
    1348:	0a 1f       	adc	r16, r26
    134a:	1b 1f       	adc	r17, r27
    134c:	17 ff       	sbrs	r17, 7
    134e:	05 c0       	rjmp	.+10     	; 0x135a <__pack_f+0x162>
    1350:	16 95       	lsr	r17
    1352:	07 95       	ror	r16
    1354:	f7 94       	ror	r15
    1356:	e7 94       	ror	r14
    1358:	31 96       	adiw	r30, 0x01	; 1
    135a:	87 e0       	ldi	r24, 0x07	; 7
    135c:	16 95       	lsr	r17
    135e:	07 95       	ror	r16
    1360:	f7 94       	ror	r15
    1362:	e7 94       	ror	r14
    1364:	8a 95       	dec	r24
    1366:	d1 f7       	brne	.-12     	; 0x135c <__pack_f+0x164>
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <__pack_f+0x17c>
    136a:	ee 24       	eor	r14, r14
    136c:	ff 24       	eor	r15, r15
    136e:	87 01       	movw	r16, r14
    1370:	ef ef       	ldi	r30, 0xFF	; 255
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	6e 2f       	mov	r22, r30
    1376:	67 95       	ror	r22
    1378:	66 27       	eor	r22, r22
    137a:	67 95       	ror	r22
    137c:	90 2f       	mov	r25, r16
    137e:	9f 77       	andi	r25, 0x7F	; 127
    1380:	d7 94       	ror	r13
    1382:	dd 24       	eor	r13, r13
    1384:	d7 94       	ror	r13
    1386:	8e 2f       	mov	r24, r30
    1388:	86 95       	lsr	r24
    138a:	49 2f       	mov	r20, r25
    138c:	46 2b       	or	r20, r22
    138e:	58 2f       	mov	r21, r24
    1390:	5d 29       	or	r21, r13
    1392:	b7 01       	movw	r22, r14
    1394:	ca 01       	movw	r24, r20
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	08 95       	ret

000013a2 <__unpack_f>:
    13a2:	fc 01       	movw	r30, r24
    13a4:	db 01       	movw	r26, r22
    13a6:	40 81       	ld	r20, Z
    13a8:	51 81       	ldd	r21, Z+1	; 0x01
    13aa:	22 81       	ldd	r18, Z+2	; 0x02
    13ac:	62 2f       	mov	r22, r18
    13ae:	6f 77       	andi	r22, 0x7F	; 127
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	22 1f       	adc	r18, r18
    13b4:	22 27       	eor	r18, r18
    13b6:	22 1f       	adc	r18, r18
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	89 2f       	mov	r24, r25
    13bc:	88 0f       	add	r24, r24
    13be:	82 2b       	or	r24, r18
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	99 1f       	adc	r25, r25
    13c6:	99 27       	eor	r25, r25
    13c8:	99 1f       	adc	r25, r25
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	9c 93       	st	X, r25
    13ce:	11 97       	sbiw	r26, 0x01	; 1
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	a9 f5       	brne	.+106    	; 0x1440 <__unpack_f+0x9e>
    13d6:	41 15       	cp	r20, r1
    13d8:	51 05       	cpc	r21, r1
    13da:	61 05       	cpc	r22, r1
    13dc:	71 05       	cpc	r23, r1
    13de:	11 f4       	brne	.+4      	; 0x13e4 <__unpack_f+0x42>
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	37 c0       	rjmp	.+110    	; 0x1452 <__unpack_f+0xb0>
    13e4:	82 e8       	ldi	r24, 0x82	; 130
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	9c 93       	st	X, r25
    13ec:	8e 93       	st	-X, r24
    13ee:	12 97       	sbiw	r26, 0x02	; 2
    13f0:	9a 01       	movw	r18, r20
    13f2:	ab 01       	movw	r20, r22
    13f4:	67 e0       	ldi	r22, 0x07	; 7
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	44 1f       	adc	r20, r20
    13fc:	55 1f       	adc	r21, r21
    13fe:	6a 95       	dec	r22
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <__unpack_f+0x54>
    1402:	83 e0       	ldi	r24, 0x03	; 3
    1404:	8c 93       	st	X, r24
    1406:	0d c0       	rjmp	.+26     	; 0x1422 <__unpack_f+0x80>
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	44 1f       	adc	r20, r20
    140e:	55 1f       	adc	r21, r21
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	8d 91       	ld	r24, X+
    1414:	9c 91       	ld	r25, X
    1416:	13 97       	sbiw	r26, 0x03	; 3
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	13 96       	adiw	r26, 0x03	; 3
    141c:	9c 93       	st	X, r25
    141e:	8e 93       	st	-X, r24
    1420:	12 97       	sbiw	r26, 0x02	; 2
    1422:	20 30       	cpi	r18, 0x00	; 0
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	38 07       	cpc	r19, r24
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	48 07       	cpc	r20, r24
    142c:	80 e4       	ldi	r24, 0x40	; 64
    142e:	58 07       	cpc	r21, r24
    1430:	58 f3       	brcs	.-42     	; 0x1408 <__unpack_f+0x66>
    1432:	14 96       	adiw	r26, 0x04	; 4
    1434:	2d 93       	st	X+, r18
    1436:	3d 93       	st	X+, r19
    1438:	4d 93       	st	X+, r20
    143a:	5c 93       	st	X, r21
    143c:	17 97       	sbiw	r26, 0x07	; 7
    143e:	08 95       	ret
    1440:	2f 3f       	cpi	r18, 0xFF	; 255
    1442:	31 05       	cpc	r19, r1
    1444:	79 f4       	brne	.+30     	; 0x1464 <__unpack_f+0xc2>
    1446:	41 15       	cp	r20, r1
    1448:	51 05       	cpc	r21, r1
    144a:	61 05       	cpc	r22, r1
    144c:	71 05       	cpc	r23, r1
    144e:	19 f4       	brne	.+6      	; 0x1456 <__unpack_f+0xb4>
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	8c 93       	st	X, r24
    1454:	08 95       	ret
    1456:	64 ff       	sbrs	r22, 4
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <__unpack_f+0xbe>
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	8c 93       	st	X, r24
    145e:	12 c0       	rjmp	.+36     	; 0x1484 <__unpack_f+0xe2>
    1460:	1c 92       	st	X, r1
    1462:	10 c0       	rjmp	.+32     	; 0x1484 <__unpack_f+0xe2>
    1464:	2f 57       	subi	r18, 0x7F	; 127
    1466:	30 40       	sbci	r19, 0x00	; 0
    1468:	13 96       	adiw	r26, 0x03	; 3
    146a:	3c 93       	st	X, r19
    146c:	2e 93       	st	-X, r18
    146e:	12 97       	sbiw	r26, 0x02	; 2
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	8c 93       	st	X, r24
    1474:	87 e0       	ldi	r24, 0x07	; 7
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	66 1f       	adc	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	8a 95       	dec	r24
    1480:	d1 f7       	brne	.-12     	; 0x1476 <__unpack_f+0xd4>
    1482:	70 64       	ori	r23, 0x40	; 64
    1484:	14 96       	adiw	r26, 0x04	; 4
    1486:	4d 93       	st	X+, r20
    1488:	5d 93       	st	X+, r21
    148a:	6d 93       	st	X+, r22
    148c:	7c 93       	st	X, r23
    148e:	17 97       	sbiw	r26, 0x07	; 7
    1490:	08 95       	ret

00001492 <__fpcmp_parts_f>:
    1492:	1f 93       	push	r17
    1494:	dc 01       	movw	r26, r24
    1496:	fb 01       	movw	r30, r22
    1498:	9c 91       	ld	r25, X
    149a:	92 30       	cpi	r25, 0x02	; 2
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <__fpcmp_parts_f+0xe>
    149e:	47 c0       	rjmp	.+142    	; 0x152e <__fpcmp_parts_f+0x9c>
    14a0:	80 81       	ld	r24, Z
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <__fpcmp_parts_f+0x16>
    14a6:	43 c0       	rjmp	.+134    	; 0x152e <__fpcmp_parts_f+0x9c>
    14a8:	94 30       	cpi	r25, 0x04	; 4
    14aa:	51 f4       	brne	.+20     	; 0x14c0 <__fpcmp_parts_f+0x2e>
    14ac:	11 96       	adiw	r26, 0x01	; 1
    14ae:	1c 91       	ld	r17, X
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	99 f5       	brne	.+102    	; 0x151a <__fpcmp_parts_f+0x88>
    14b4:	81 81       	ldd	r24, Z+1	; 0x01
    14b6:	68 2f       	mov	r22, r24
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	61 1b       	sub	r22, r17
    14bc:	71 09       	sbc	r23, r1
    14be:	3f c0       	rjmp	.+126    	; 0x153e <__fpcmp_parts_f+0xac>
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	21 f0       	breq	.+8      	; 0x14cc <__fpcmp_parts_f+0x3a>
    14c4:	92 30       	cpi	r25, 0x02	; 2
    14c6:	31 f4       	brne	.+12     	; 0x14d4 <__fpcmp_parts_f+0x42>
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	b9 f1       	breq	.+110    	; 0x153a <__fpcmp_parts_f+0xa8>
    14cc:	81 81       	ldd	r24, Z+1	; 0x01
    14ce:	88 23       	and	r24, r24
    14d0:	89 f1       	breq	.+98     	; 0x1534 <__fpcmp_parts_f+0xa2>
    14d2:	2d c0       	rjmp	.+90     	; 0x152e <__fpcmp_parts_f+0x9c>
    14d4:	11 96       	adiw	r26, 0x01	; 1
    14d6:	1c 91       	ld	r17, X
    14d8:	11 97       	sbiw	r26, 0x01	; 1
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	f1 f0       	breq	.+60     	; 0x151a <__fpcmp_parts_f+0x88>
    14de:	81 81       	ldd	r24, Z+1	; 0x01
    14e0:	18 17       	cp	r17, r24
    14e2:	d9 f4       	brne	.+54     	; 0x151a <__fpcmp_parts_f+0x88>
    14e4:	12 96       	adiw	r26, 0x02	; 2
    14e6:	2d 91       	ld	r18, X+
    14e8:	3c 91       	ld	r19, X
    14ea:	13 97       	sbiw	r26, 0x03	; 3
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	82 17       	cp	r24, r18
    14f2:	93 07       	cpc	r25, r19
    14f4:	94 f0       	brlt	.+36     	; 0x151a <__fpcmp_parts_f+0x88>
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	bc f0       	brlt	.+46     	; 0x152a <__fpcmp_parts_f+0x98>
    14fc:	14 96       	adiw	r26, 0x04	; 4
    14fe:	8d 91       	ld	r24, X+
    1500:	9d 91       	ld	r25, X+
    1502:	0d 90       	ld	r0, X+
    1504:	bc 91       	ld	r27, X
    1506:	a0 2d       	mov	r26, r0
    1508:	24 81       	ldd	r18, Z+4	; 0x04
    150a:	35 81       	ldd	r19, Z+5	; 0x05
    150c:	46 81       	ldd	r20, Z+6	; 0x06
    150e:	57 81       	ldd	r21, Z+7	; 0x07
    1510:	28 17       	cp	r18, r24
    1512:	39 07       	cpc	r19, r25
    1514:	4a 07       	cpc	r20, r26
    1516:	5b 07       	cpc	r21, r27
    1518:	18 f4       	brcc	.+6      	; 0x1520 <__fpcmp_parts_f+0x8e>
    151a:	11 23       	and	r17, r17
    151c:	41 f0       	breq	.+16     	; 0x152e <__fpcmp_parts_f+0x9c>
    151e:	0a c0       	rjmp	.+20     	; 0x1534 <__fpcmp_parts_f+0xa2>
    1520:	82 17       	cp	r24, r18
    1522:	93 07       	cpc	r25, r19
    1524:	a4 07       	cpc	r26, r20
    1526:	b5 07       	cpc	r27, r21
    1528:	40 f4       	brcc	.+16     	; 0x153a <__fpcmp_parts_f+0xa8>
    152a:	11 23       	and	r17, r17
    152c:	19 f0       	breq	.+6      	; 0x1534 <__fpcmp_parts_f+0xa2>
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	05 c0       	rjmp	.+10     	; 0x153e <__fpcmp_parts_f+0xac>
    1534:	6f ef       	ldi	r22, 0xFF	; 255
    1536:	7f ef       	ldi	r23, 0xFF	; 255
    1538:	02 c0       	rjmp	.+4      	; 0x153e <__fpcmp_parts_f+0xac>
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	cb 01       	movw	r24, r22
    1540:	1f 91       	pop	r17
    1542:	08 95       	ret

00001544 <atoi>:
    1544:	fc 01       	movw	r30, r24
    1546:	88 27       	eor	r24, r24
    1548:	99 27       	eor	r25, r25
    154a:	e8 94       	clt
    154c:	21 91       	ld	r18, Z+
    154e:	20 32       	cpi	r18, 0x20	; 32
    1550:	e9 f3       	breq	.-6      	; 0x154c <atoi+0x8>
    1552:	29 30       	cpi	r18, 0x09	; 9
    1554:	10 f0       	brcs	.+4      	; 0x155a <atoi+0x16>
    1556:	2e 30       	cpi	r18, 0x0E	; 14
    1558:	c8 f3       	brcs	.-14     	; 0x154c <atoi+0x8>
    155a:	2b 32       	cpi	r18, 0x2B	; 43
    155c:	41 f0       	breq	.+16     	; 0x156e <atoi+0x2a>
    155e:	2d 32       	cpi	r18, 0x2D	; 45
    1560:	39 f4       	brne	.+14     	; 0x1570 <atoi+0x2c>
    1562:	68 94       	set
    1564:	04 c0       	rjmp	.+8      	; 0x156e <atoi+0x2a>
    1566:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__mulhi_const_10>
    156a:	82 0f       	add	r24, r18
    156c:	91 1d       	adc	r25, r1
    156e:	21 91       	ld	r18, Z+
    1570:	20 53       	subi	r18, 0x30	; 48
    1572:	2a 30       	cpi	r18, 0x0A	; 10
    1574:	c0 f3       	brcs	.-16     	; 0x1566 <atoi+0x22>
    1576:	1e f4       	brtc	.+6      	; 0x157e <atoi+0x3a>
    1578:	90 95       	com	r25
    157a:	81 95       	neg	r24
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	08 95       	ret

00001580 <__mulhi_const_10>:
    1580:	7a e0       	ldi	r23, 0x0A	; 10
    1582:	97 9f       	mul	r25, r23
    1584:	90 2d       	mov	r25, r0
    1586:	87 9f       	mul	r24, r23
    1588:	80 2d       	mov	r24, r0
    158a:	91 0d       	add	r25, r1
    158c:	11 24       	eor	r1, r1
    158e:	08 95       	ret

00001590 <__divmodhi4>:
    1590:	97 fb       	bst	r25, 7
    1592:	09 2e       	mov	r0, r25
    1594:	07 26       	eor	r0, r23
    1596:	0a d0       	rcall	.+20     	; 0x15ac <__divmodhi4_neg1>
    1598:	77 fd       	sbrc	r23, 7
    159a:	04 d0       	rcall	.+8      	; 0x15a4 <__divmodhi4_neg2>
    159c:	0c d0       	rcall	.+24     	; 0x15b6 <__udivmodhi4>
    159e:	06 d0       	rcall	.+12     	; 0x15ac <__divmodhi4_neg1>
    15a0:	00 20       	and	r0, r0
    15a2:	1a f4       	brpl	.+6      	; 0x15aa <__divmodhi4_exit>

000015a4 <__divmodhi4_neg2>:
    15a4:	70 95       	com	r23
    15a6:	61 95       	neg	r22
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255

000015aa <__divmodhi4_exit>:
    15aa:	08 95       	ret

000015ac <__divmodhi4_neg1>:
    15ac:	f6 f7       	brtc	.-4      	; 0x15aa <__divmodhi4_exit>
    15ae:	90 95       	com	r25
    15b0:	81 95       	neg	r24
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	08 95       	ret

000015b6 <__udivmodhi4>:
    15b6:	aa 1b       	sub	r26, r26
    15b8:	bb 1b       	sub	r27, r27
    15ba:	51 e1       	ldi	r21, 0x11	; 17
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <__udivmodhi4_ep>

000015be <__udivmodhi4_loop>:
    15be:	aa 1f       	adc	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	a6 17       	cp	r26, r22
    15c4:	b7 07       	cpc	r27, r23
    15c6:	10 f0       	brcs	.+4      	; 0x15cc <__udivmodhi4_ep>
    15c8:	a6 1b       	sub	r26, r22
    15ca:	b7 0b       	sbc	r27, r23

000015cc <__udivmodhi4_ep>:
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	5a 95       	dec	r21
    15d2:	a9 f7       	brne	.-22     	; 0x15be <__udivmodhi4_loop>
    15d4:	80 95       	com	r24
    15d6:	90 95       	com	r25
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	08 95       	ret

000015de <__prologue_saves__>:
    15de:	2f 92       	push	r2
    15e0:	3f 92       	push	r3
    15e2:	4f 92       	push	r4
    15e4:	5f 92       	push	r5
    15e6:	6f 92       	push	r6
    15e8:	7f 92       	push	r7
    15ea:	8f 92       	push	r8
    15ec:	9f 92       	push	r9
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	ca 1b       	sub	r28, r26
    1608:	db 0b       	sbc	r29, r27
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	19 94       	eijmp

00001616 <__epilogue_restores__>:
    1616:	2a 88       	ldd	r2, Y+18	; 0x12
    1618:	39 88       	ldd	r3, Y+17	; 0x11
    161a:	48 88       	ldd	r4, Y+16	; 0x10
    161c:	5f 84       	ldd	r5, Y+15	; 0x0f
    161e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1620:	7d 84       	ldd	r7, Y+13	; 0x0d
    1622:	8c 84       	ldd	r8, Y+12	; 0x0c
    1624:	9b 84       	ldd	r9, Y+11	; 0x0b
    1626:	aa 84       	ldd	r10, Y+10	; 0x0a
    1628:	b9 84       	ldd	r11, Y+9	; 0x09
    162a:	c8 84       	ldd	r12, Y+8	; 0x08
    162c:	df 80       	ldd	r13, Y+7	; 0x07
    162e:	ee 80       	ldd	r14, Y+6	; 0x06
    1630:	fd 80       	ldd	r15, Y+5	; 0x05
    1632:	0c 81       	ldd	r16, Y+4	; 0x04
    1634:	1b 81       	ldd	r17, Y+3	; 0x03
    1636:	aa 81       	ldd	r26, Y+2	; 0x02
    1638:	b9 81       	ldd	r27, Y+1	; 0x01
    163a:	ce 0f       	add	r28, r30
    163c:	d1 1d       	adc	r29, r1
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	ed 01       	movw	r28, r26
    164a:	08 95       	ret

0000164c <_exit>:
    164c:	f8 94       	cli

0000164e <__stop_program>:
    164e:	ff cf       	rjmp	.-2      	; 0x164e <__stop_program>
